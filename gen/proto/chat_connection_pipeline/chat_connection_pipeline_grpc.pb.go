// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/chat_connection_pipeline/chat_connection_pipeline.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatConnectionPipelineService_AttachConnectionQueueToApp_FullMethodName        = "/proto.chatConnectionPipeline.ChatConnectionPipelineService/AttachConnectionQueueToApp"
	ChatConnectionPipelineService_UpsertQueueInConnectionAppById_FullMethodName    = "/proto.chatConnectionPipeline.ChatConnectionPipelineService/UpsertQueueInConnectionAppById"
	ChatConnectionPipelineService_UpdateChatConnectionAppStatusById_FullMethodName = "/proto.chatConnectionPipeline.ChatConnectionPipelineService/UpdateChatConnectionAppStatusById"
)

// ChatConnectionPipelineServiceClient is the client API for ChatConnectionPipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatConnectionPipelineServiceClient interface {
	AttachConnectionQueueToApp(ctx context.Context, in *ChatConnectionPipelineQueueRequest, opts ...grpc.CallOption) (*ChatConnectionPipelineQueueResponse, error)
	UpsertQueueInConnectionAppById(ctx context.Context, in *UpsertQueueInConnectionAppByIdRequest, opts ...grpc.CallOption) (*UpsertQueueInConnectionAppByIdResponse, error)
	UpdateChatConnectionAppStatusById(ctx context.Context, in *PutChatConnectionAppStatusRequest, opts ...grpc.CallOption) (*PutChatConnectionAppStatusResponse, error)
}

type chatConnectionPipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatConnectionPipelineServiceClient(cc grpc.ClientConnInterface) ChatConnectionPipelineServiceClient {
	return &chatConnectionPipelineServiceClient{cc}
}

func (c *chatConnectionPipelineServiceClient) AttachConnectionQueueToApp(ctx context.Context, in *ChatConnectionPipelineQueueRequest, opts ...grpc.CallOption) (*ChatConnectionPipelineQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatConnectionPipelineQueueResponse)
	err := c.cc.Invoke(ctx, ChatConnectionPipelineService_AttachConnectionQueueToApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatConnectionPipelineServiceClient) UpsertQueueInConnectionAppById(ctx context.Context, in *UpsertQueueInConnectionAppByIdRequest, opts ...grpc.CallOption) (*UpsertQueueInConnectionAppByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertQueueInConnectionAppByIdResponse)
	err := c.cc.Invoke(ctx, ChatConnectionPipelineService_UpsertQueueInConnectionAppById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatConnectionPipelineServiceClient) UpdateChatConnectionAppStatusById(ctx context.Context, in *PutChatConnectionAppStatusRequest, opts ...grpc.CallOption) (*PutChatConnectionAppStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChatConnectionAppStatusResponse)
	err := c.cc.Invoke(ctx, ChatConnectionPipelineService_UpdateChatConnectionAppStatusById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatConnectionPipelineServiceServer is the server API for ChatConnectionPipelineService service.
// All implementations should embed UnimplementedChatConnectionPipelineServiceServer
// for forward compatibility
type ChatConnectionPipelineServiceServer interface {
	AttachConnectionQueueToApp(context.Context, *ChatConnectionPipelineQueueRequest) (*ChatConnectionPipelineQueueResponse, error)
	UpsertQueueInConnectionAppById(context.Context, *UpsertQueueInConnectionAppByIdRequest) (*UpsertQueueInConnectionAppByIdResponse, error)
	UpdateChatConnectionAppStatusById(context.Context, *PutChatConnectionAppStatusRequest) (*PutChatConnectionAppStatusResponse, error)
}

// UnimplementedChatConnectionPipelineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatConnectionPipelineServiceServer struct {
}

func (UnimplementedChatConnectionPipelineServiceServer) AttachConnectionQueueToApp(context.Context, *ChatConnectionPipelineQueueRequest) (*ChatConnectionPipelineQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachConnectionQueueToApp not implemented")
}
func (UnimplementedChatConnectionPipelineServiceServer) UpsertQueueInConnectionAppById(context.Context, *UpsertQueueInConnectionAppByIdRequest) (*UpsertQueueInConnectionAppByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQueueInConnectionAppById not implemented")
}
func (UnimplementedChatConnectionPipelineServiceServer) UpdateChatConnectionAppStatusById(context.Context, *PutChatConnectionAppStatusRequest) (*PutChatConnectionAppStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatConnectionAppStatusById not implemented")
}

// UnsafeChatConnectionPipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatConnectionPipelineServiceServer will
// result in compilation errors.
type UnsafeChatConnectionPipelineServiceServer interface {
	mustEmbedUnimplementedChatConnectionPipelineServiceServer()
}

func RegisterChatConnectionPipelineServiceServer(s grpc.ServiceRegistrar, srv ChatConnectionPipelineServiceServer) {
	s.RegisterService(&ChatConnectionPipelineService_ServiceDesc, srv)
}

func _ChatConnectionPipelineService_AttachConnectionQueueToApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatConnectionPipelineQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionPipelineServiceServer).AttachConnectionQueueToApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionPipelineService_AttachConnectionQueueToApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionPipelineServiceServer).AttachConnectionQueueToApp(ctx, req.(*ChatConnectionPipelineQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatConnectionPipelineService_UpsertQueueInConnectionAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQueueInConnectionAppByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionPipelineServiceServer).UpsertQueueInConnectionAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionPipelineService_UpsertQueueInConnectionAppById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionPipelineServiceServer).UpsertQueueInConnectionAppById(ctx, req.(*UpsertQueueInConnectionAppByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatConnectionPipelineService_UpdateChatConnectionAppStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatConnectionAppStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionPipelineServiceServer).UpdateChatConnectionAppStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionPipelineService_UpdateChatConnectionAppStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionPipelineServiceServer).UpdateChatConnectionAppStatusById(ctx, req.(*PutChatConnectionAppStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatConnectionPipelineService_ServiceDesc is the grpc.ServiceDesc for ChatConnectionPipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatConnectionPipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatConnectionPipeline.ChatConnectionPipelineService",
	HandlerType: (*ChatConnectionPipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachConnectionQueueToApp",
			Handler:    _ChatConnectionPipelineService_AttachConnectionQueueToApp_Handler,
		},
		{
			MethodName: "UpsertQueueInConnectionAppById",
			Handler:    _ChatConnectionPipelineService_UpsertQueueInConnectionAppById_Handler,
		},
		{
			MethodName: "UpdateChatConnectionAppStatusById",
			Handler:    _ChatConnectionPipelineService_UpdateChatConnectionAppStatusById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_connection_pipeline/chat_connection_pipeline.proto",
}
