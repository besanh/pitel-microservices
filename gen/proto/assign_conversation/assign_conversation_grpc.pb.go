// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/assign_conversation/assign_conversation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssignConversationServiceClient is the client API for AssignConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignConversationServiceClient interface {
	GetUserAssigned(ctx context.Context, in *GetUserAssignedRequest, opts ...grpc.CallOption) (*GetUserAssignedResponse, error)
	GetUserInQueue(ctx context.Context, in *GetUserInQueueRequest, opts ...grpc.CallOption) (*GetUserInQueueResponse, error)
	InsertUserInQueue(ctx context.Context, in *PostUserInQueueRequest, opts ...grpc.CallOption) (*PostUserInQueueResponse, error)
}

type assignConversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignConversationServiceClient(cc grpc.ClientConnInterface) AssignConversationServiceClient {
	return &assignConversationServiceClient{cc}
}

func (c *assignConversationServiceClient) GetUserAssigned(ctx context.Context, in *GetUserAssignedRequest, opts ...grpc.CallOption) (*GetUserAssignedResponse, error) {
	out := new(GetUserAssignedResponse)
	err := c.cc.Invoke(ctx, "/proto.assignConversation.AssignConversationService/GetUserAssigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignConversationServiceClient) GetUserInQueue(ctx context.Context, in *GetUserInQueueRequest, opts ...grpc.CallOption) (*GetUserInQueueResponse, error) {
	out := new(GetUserInQueueResponse)
	err := c.cc.Invoke(ctx, "/proto.assignConversation.AssignConversationService/GetUserInQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignConversationServiceClient) InsertUserInQueue(ctx context.Context, in *PostUserInQueueRequest, opts ...grpc.CallOption) (*PostUserInQueueResponse, error) {
	out := new(PostUserInQueueResponse)
	err := c.cc.Invoke(ctx, "/proto.assignConversation.AssignConversationService/InsertUserInQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignConversationServiceServer is the server API for AssignConversationService service.
// All implementations should embed UnimplementedAssignConversationServiceServer
// for forward compatibility
type AssignConversationServiceServer interface {
	GetUserAssigned(context.Context, *GetUserAssignedRequest) (*GetUserAssignedResponse, error)
	GetUserInQueue(context.Context, *GetUserInQueueRequest) (*GetUserInQueueResponse, error)
	InsertUserInQueue(context.Context, *PostUserInQueueRequest) (*PostUserInQueueResponse, error)
}

// UnimplementedAssignConversationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssignConversationServiceServer struct {
}

func (UnimplementedAssignConversationServiceServer) GetUserAssigned(context.Context, *GetUserAssignedRequest) (*GetUserAssignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAssigned not implemented")
}
func (UnimplementedAssignConversationServiceServer) GetUserInQueue(context.Context, *GetUserInQueueRequest) (*GetUserInQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInQueue not implemented")
}
func (UnimplementedAssignConversationServiceServer) InsertUserInQueue(context.Context, *PostUserInQueueRequest) (*PostUserInQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserInQueue not implemented")
}

// UnsafeAssignConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignConversationServiceServer will
// result in compilation errors.
type UnsafeAssignConversationServiceServer interface {
	mustEmbedUnimplementedAssignConversationServiceServer()
}

func RegisterAssignConversationServiceServer(s grpc.ServiceRegistrar, srv AssignConversationServiceServer) {
	s.RegisterService(&AssignConversationService_ServiceDesc, srv)
}

func _AssignConversationService_GetUserAssigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAssignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignConversationServiceServer).GetUserAssigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.assignConversation.AssignConversationService/GetUserAssigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignConversationServiceServer).GetUserAssigned(ctx, req.(*GetUserAssignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignConversationService_GetUserInQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignConversationServiceServer).GetUserInQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.assignConversation.AssignConversationService/GetUserInQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignConversationServiceServer).GetUserInQueue(ctx, req.(*GetUserInQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignConversationService_InsertUserInQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserInQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignConversationServiceServer).InsertUserInQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.assignConversation.AssignConversationService/InsertUserInQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignConversationServiceServer).InsertUserInQueue(ctx, req.(*PostUserInQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignConversationService_ServiceDesc is the grpc.ServiceDesc for AssignConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.assignConversation.AssignConversationService",
	HandlerType: (*AssignConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserAssigned",
			Handler:    _AssignConversationService_GetUserAssigned_Handler,
		},
		{
			MethodName: "GetUserInQueue",
			Handler:    _AssignConversationService_GetUserInQueue_Handler,
		},
		{
			MethodName: "InsertUserInQueue",
			Handler:    _AssignConversationService_InsertUserInQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/assign_conversation/assign_conversation.proto",
}
