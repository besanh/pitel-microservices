// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/message/message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	GetMessagesWithScrollAPI(ctx context.Context, in *GetMessagesScrollRequest, opts ...grpc.CallOption) (*GetMessagesScrollResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	SendMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error)
	MarkReadMessages(ctx context.Context, in *MarkReadMessagesRequest, opts ...grpc.CallOption) (*MarkReadMessagesResponse, error)
	ShareInfo(ctx context.Context, in *ShareInfoRequest, opts ...grpc.CallOption) (*ShareInfoResponse, error)
	GetMessageMediasWithScrollAPI(ctx context.Context, in *GetMessageMediasScrollRequest, opts ...grpc.CallOption) (*GetMessageMediasScrollResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetMessagesWithScrollAPI(ctx context.Context, in *GetMessagesScrollRequest, opts ...grpc.CallOption) (*GetMessagesScrollResponse, error) {
	out := new(GetMessagesScrollResponse)
	err := c.cc.Invoke(ctx, "/proto.message.MessageService/GetMessagesWithScrollAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/proto.message.MessageService/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error) {
	out := new(PostMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.message.MessageService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MarkReadMessages(ctx context.Context, in *MarkReadMessagesRequest, opts ...grpc.CallOption) (*MarkReadMessagesResponse, error) {
	out := new(MarkReadMessagesResponse)
	err := c.cc.Invoke(ctx, "/proto.message.MessageService/MarkReadMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ShareInfo(ctx context.Context, in *ShareInfoRequest, opts ...grpc.CallOption) (*ShareInfoResponse, error) {
	out := new(ShareInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.message.MessageService/ShareInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessageMediasWithScrollAPI(ctx context.Context, in *GetMessageMediasScrollRequest, opts ...grpc.CallOption) (*GetMessageMediasScrollResponse, error) {
	out := new(GetMessageMediasScrollResponse)
	err := c.cc.Invoke(ctx, "/proto.message.MessageService/GetMessageMediasWithScrollAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations should embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	GetMessagesWithScrollAPI(context.Context, *GetMessagesScrollRequest) (*GetMessagesScrollResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	SendMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error)
	MarkReadMessages(context.Context, *MarkReadMessagesRequest) (*MarkReadMessagesResponse, error)
	ShareInfo(context.Context, *ShareInfoRequest) (*ShareInfoResponse, error)
	GetMessageMediasWithScrollAPI(context.Context, *GetMessageMediasScrollRequest) (*GetMessageMediasScrollResponse, error)
}

// UnimplementedMessageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetMessagesWithScrollAPI(context.Context, *GetMessagesScrollRequest) (*GetMessagesScrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesWithScrollAPI not implemented")
}
func (UnimplementedMessageServiceServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessageServiceServer) SendMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServiceServer) MarkReadMessages(context.Context, *MarkReadMessagesRequest) (*MarkReadMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadMessages not implemented")
}
func (UnimplementedMessageServiceServer) ShareInfo(context.Context, *ShareInfoRequest) (*ShareInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareInfo not implemented")
}
func (UnimplementedMessageServiceServer) GetMessageMediasWithScrollAPI(context.Context, *GetMessageMediasScrollRequest) (*GetMessageMediasScrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageMediasWithScrollAPI not implemented")
}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetMessagesWithScrollAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesScrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessagesWithScrollAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.message.MessageService/GetMessagesWithScrollAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessagesWithScrollAPI(ctx, req.(*GetMessagesScrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.message.MessageService/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.message.MessageService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendMessage(ctx, req.(*PostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MarkReadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkReadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MarkReadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.message.MessageService/MarkReadMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MarkReadMessages(ctx, req.(*MarkReadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ShareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ShareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.message.MessageService/ShareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ShareInfo(ctx, req.(*ShareInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessageMediasWithScrollAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageMediasScrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMessageMediasWithScrollAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.message.MessageService/GetMessageMediasWithScrollAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMessageMediasWithScrollAPI(ctx, req.(*GetMessageMediasScrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessagesWithScrollAPI",
			Handler:    _MessageService_GetMessagesWithScrollAPI_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _MessageService_GetMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessageService_SendMessage_Handler,
		},
		{
			MethodName: "MarkReadMessages",
			Handler:    _MessageService_MarkReadMessages_Handler,
		},
		{
			MethodName: "ShareInfo",
			Handler:    _MessageService_ShareInfo_Handler,
		},
		{
			MethodName: "GetMessageMediasWithScrollAPI",
			Handler:    _MessageService_GetMessageMediasWithScrollAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message/message.proto",
}
