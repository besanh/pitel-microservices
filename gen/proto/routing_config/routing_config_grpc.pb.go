// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/routing_config/routing_config.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutingConfig_PostRoutingConfig_FullMethodName       = "/proto.routing_config.RoutingConfig/PostRoutingConfig"
	RoutingConfig_GetRoutingConfigs_FullMethodName       = "/proto.routing_config.RoutingConfig/GetRoutingConfigs"
	RoutingConfig_GetRoutingConfigById_FullMethodName    = "/proto.routing_config.RoutingConfig/GetRoutingConfigById"
	RoutingConfig_PutRoutingConfigById_FullMethodName    = "/proto.routing_config.RoutingConfig/PutRoutingConfigById"
	RoutingConfig_DeleteRoutingConfigById_FullMethodName = "/proto.routing_config.RoutingConfig/DeleteRoutingConfigById"
)

// RoutingConfigClient is the client API for RoutingConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingConfigClient interface {
	PostRoutingConfig(ctx context.Context, in *RoutingConfigBodyRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error)
	GetRoutingConfigs(ctx context.Context, in *RoutingConfigRequest, opts ...grpc.CallOption) (*RoutingConfigResponse, error)
	GetRoutingConfigById(ctx context.Context, in *RoutingConfigByIdRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error)
	PutRoutingConfigById(ctx context.Context, in *RoutingConfigPutRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error)
	DeleteRoutingConfigById(ctx context.Context, in *RoutingConfigByIdRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error)
}

type routingConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingConfigClient(cc grpc.ClientConnInterface) RoutingConfigClient {
	return &routingConfigClient{cc}
}

func (c *routingConfigClient) PostRoutingConfig(ctx context.Context, in *RoutingConfigBodyRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error) {
	out := new(RoutingConfigByIdResponse)
	err := c.cc.Invoke(ctx, RoutingConfig_PostRoutingConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingConfigClient) GetRoutingConfigs(ctx context.Context, in *RoutingConfigRequest, opts ...grpc.CallOption) (*RoutingConfigResponse, error) {
	out := new(RoutingConfigResponse)
	err := c.cc.Invoke(ctx, RoutingConfig_GetRoutingConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingConfigClient) GetRoutingConfigById(ctx context.Context, in *RoutingConfigByIdRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error) {
	out := new(RoutingConfigByIdResponse)
	err := c.cc.Invoke(ctx, RoutingConfig_GetRoutingConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingConfigClient) PutRoutingConfigById(ctx context.Context, in *RoutingConfigPutRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error) {
	out := new(RoutingConfigByIdResponse)
	err := c.cc.Invoke(ctx, RoutingConfig_PutRoutingConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingConfigClient) DeleteRoutingConfigById(ctx context.Context, in *RoutingConfigByIdRequest, opts ...grpc.CallOption) (*RoutingConfigByIdResponse, error) {
	out := new(RoutingConfigByIdResponse)
	err := c.cc.Invoke(ctx, RoutingConfig_DeleteRoutingConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingConfigServer is the server API for RoutingConfig service.
// All implementations should embed UnimplementedRoutingConfigServer
// for forward compatibility
type RoutingConfigServer interface {
	PostRoutingConfig(context.Context, *RoutingConfigBodyRequest) (*RoutingConfigByIdResponse, error)
	GetRoutingConfigs(context.Context, *RoutingConfigRequest) (*RoutingConfigResponse, error)
	GetRoutingConfigById(context.Context, *RoutingConfigByIdRequest) (*RoutingConfigByIdResponse, error)
	PutRoutingConfigById(context.Context, *RoutingConfigPutRequest) (*RoutingConfigByIdResponse, error)
	DeleteRoutingConfigById(context.Context, *RoutingConfigByIdRequest) (*RoutingConfigByIdResponse, error)
}

// UnimplementedRoutingConfigServer should be embedded to have forward compatible implementations.
type UnimplementedRoutingConfigServer struct {
}

func (UnimplementedRoutingConfigServer) PostRoutingConfig(context.Context, *RoutingConfigBodyRequest) (*RoutingConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRoutingConfig not implemented")
}
func (UnimplementedRoutingConfigServer) GetRoutingConfigs(context.Context, *RoutingConfigRequest) (*RoutingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutingConfigs not implemented")
}
func (UnimplementedRoutingConfigServer) GetRoutingConfigById(context.Context, *RoutingConfigByIdRequest) (*RoutingConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutingConfigById not implemented")
}
func (UnimplementedRoutingConfigServer) PutRoutingConfigById(context.Context, *RoutingConfigPutRequest) (*RoutingConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRoutingConfigById not implemented")
}
func (UnimplementedRoutingConfigServer) DeleteRoutingConfigById(context.Context, *RoutingConfigByIdRequest) (*RoutingConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingConfigById not implemented")
}

// UnsafeRoutingConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingConfigServer will
// result in compilation errors.
type UnsafeRoutingConfigServer interface {
	mustEmbedUnimplementedRoutingConfigServer()
}

func RegisterRoutingConfigServer(s grpc.ServiceRegistrar, srv RoutingConfigServer) {
	s.RegisterService(&RoutingConfig_ServiceDesc, srv)
}

func _RoutingConfig_PostRoutingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfigBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingConfigServer).PostRoutingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingConfig_PostRoutingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingConfigServer).PostRoutingConfig(ctx, req.(*RoutingConfigBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingConfig_GetRoutingConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingConfigServer).GetRoutingConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingConfig_GetRoutingConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingConfigServer).GetRoutingConfigs(ctx, req.(*RoutingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingConfig_GetRoutingConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingConfigServer).GetRoutingConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingConfig_GetRoutingConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingConfigServer).GetRoutingConfigById(ctx, req.(*RoutingConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingConfig_PutRoutingConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfigPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingConfigServer).PutRoutingConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingConfig_PutRoutingConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingConfigServer).PutRoutingConfigById(ctx, req.(*RoutingConfigPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingConfig_DeleteRoutingConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingConfigServer).DeleteRoutingConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingConfig_DeleteRoutingConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingConfigServer).DeleteRoutingConfigById(ctx, req.(*RoutingConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingConfig_ServiceDesc is the grpc.ServiceDesc for RoutingConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.routing_config.RoutingConfig",
	HandlerType: (*RoutingConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostRoutingConfig",
			Handler:    _RoutingConfig_PostRoutingConfig_Handler,
		},
		{
			MethodName: "GetRoutingConfigs",
			Handler:    _RoutingConfig_GetRoutingConfigs_Handler,
		},
		{
			MethodName: "GetRoutingConfigById",
			Handler:    _RoutingConfig_GetRoutingConfigById_Handler,
		},
		{
			MethodName: "PutRoutingConfigById",
			Handler:    _RoutingConfig_PutRoutingConfigById_Handler,
		},
		{
			MethodName: "DeleteRoutingConfigById",
			Handler:    _RoutingConfig_DeleteRoutingConfigById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/routing_config/routing_config.proto",
}
