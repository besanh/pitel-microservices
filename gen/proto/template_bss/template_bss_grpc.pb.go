// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/template_bss/template_bss.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplateBss_PostTemplateBss_FullMethodName       = "/proto.template_bss.TemplateBss/PostTemplateBss"
	TemplateBss_GetTemplateBsses_FullMethodName      = "/proto.template_bss.TemplateBss/GetTemplateBsses"
	TemplateBss_GetTemplateBssById_FullMethodName    = "/proto.template_bss.TemplateBss/GetTemplateBssById"
	TemplateBss_PutTemplateBssById_FullMethodName    = "/proto.template_bss.TemplateBss/PutTemplateBssById"
	TemplateBss_DeleteTemplateBssById_FullMethodName = "/proto.template_bss.TemplateBss/DeleteTemplateBssById"
)

// TemplateBssClient is the client API for TemplateBss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateBssClient interface {
	PostTemplateBss(ctx context.Context, in *TemplateBssBodyRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error)
	GetTemplateBsses(ctx context.Context, in *TemplateBssRequest, opts ...grpc.CallOption) (*TemplateBssResponse, error)
	GetTemplateBssById(ctx context.Context, in *TemplateBssByIdRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error)
	PutTemplateBssById(ctx context.Context, in *TemplateBssPutRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error)
	DeleteTemplateBssById(ctx context.Context, in *TemplateBssByIdRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error)
}

type templateBssClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateBssClient(cc grpc.ClientConnInterface) TemplateBssClient {
	return &templateBssClient{cc}
}

func (c *templateBssClient) PostTemplateBss(ctx context.Context, in *TemplateBssBodyRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error) {
	out := new(TemplateBssByIdResponse)
	err := c.cc.Invoke(ctx, TemplateBss_PostTemplateBss_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateBssClient) GetTemplateBsses(ctx context.Context, in *TemplateBssRequest, opts ...grpc.CallOption) (*TemplateBssResponse, error) {
	out := new(TemplateBssResponse)
	err := c.cc.Invoke(ctx, TemplateBss_GetTemplateBsses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateBssClient) GetTemplateBssById(ctx context.Context, in *TemplateBssByIdRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error) {
	out := new(TemplateBssByIdResponse)
	err := c.cc.Invoke(ctx, TemplateBss_GetTemplateBssById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateBssClient) PutTemplateBssById(ctx context.Context, in *TemplateBssPutRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error) {
	out := new(TemplateBssByIdResponse)
	err := c.cc.Invoke(ctx, TemplateBss_PutTemplateBssById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateBssClient) DeleteTemplateBssById(ctx context.Context, in *TemplateBssByIdRequest, opts ...grpc.CallOption) (*TemplateBssByIdResponse, error) {
	out := new(TemplateBssByIdResponse)
	err := c.cc.Invoke(ctx, TemplateBss_DeleteTemplateBssById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateBssServer is the server API for TemplateBss service.
// All implementations should embed UnimplementedTemplateBssServer
// for forward compatibility
type TemplateBssServer interface {
	PostTemplateBss(context.Context, *TemplateBssBodyRequest) (*TemplateBssByIdResponse, error)
	GetTemplateBsses(context.Context, *TemplateBssRequest) (*TemplateBssResponse, error)
	GetTemplateBssById(context.Context, *TemplateBssByIdRequest) (*TemplateBssByIdResponse, error)
	PutTemplateBssById(context.Context, *TemplateBssPutRequest) (*TemplateBssByIdResponse, error)
	DeleteTemplateBssById(context.Context, *TemplateBssByIdRequest) (*TemplateBssByIdResponse, error)
}

// UnimplementedTemplateBssServer should be embedded to have forward compatible implementations.
type UnimplementedTemplateBssServer struct {
}

func (UnimplementedTemplateBssServer) PostTemplateBss(context.Context, *TemplateBssBodyRequest) (*TemplateBssByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTemplateBss not implemented")
}
func (UnimplementedTemplateBssServer) GetTemplateBsses(context.Context, *TemplateBssRequest) (*TemplateBssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateBsses not implemented")
}
func (UnimplementedTemplateBssServer) GetTemplateBssById(context.Context, *TemplateBssByIdRequest) (*TemplateBssByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateBssById not implemented")
}
func (UnimplementedTemplateBssServer) PutTemplateBssById(context.Context, *TemplateBssPutRequest) (*TemplateBssByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTemplateBssById not implemented")
}
func (UnimplementedTemplateBssServer) DeleteTemplateBssById(context.Context, *TemplateBssByIdRequest) (*TemplateBssByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateBssById not implemented")
}

// UnsafeTemplateBssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateBssServer will
// result in compilation errors.
type UnsafeTemplateBssServer interface {
	mustEmbedUnimplementedTemplateBssServer()
}

func RegisterTemplateBssServer(s grpc.ServiceRegistrar, srv TemplateBssServer) {
	s.RegisterService(&TemplateBss_ServiceDesc, srv)
}

func _TemplateBss_PostTemplateBss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateBssBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateBssServer).PostTemplateBss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateBss_PostTemplateBss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateBssServer).PostTemplateBss(ctx, req.(*TemplateBssBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateBss_GetTemplateBsses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateBssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateBssServer).GetTemplateBsses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateBss_GetTemplateBsses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateBssServer).GetTemplateBsses(ctx, req.(*TemplateBssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateBss_GetTemplateBssById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateBssByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateBssServer).GetTemplateBssById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateBss_GetTemplateBssById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateBssServer).GetTemplateBssById(ctx, req.(*TemplateBssByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateBss_PutTemplateBssById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateBssPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateBssServer).PutTemplateBssById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateBss_PutTemplateBssById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateBssServer).PutTemplateBssById(ctx, req.(*TemplateBssPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateBss_DeleteTemplateBssById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateBssByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateBssServer).DeleteTemplateBssById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateBss_DeleteTemplateBssById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateBssServer).DeleteTemplateBssById(ctx, req.(*TemplateBssByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateBss_ServiceDesc is the grpc.ServiceDesc for TemplateBss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateBss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.template_bss.TemplateBss",
	HandlerType: (*TemplateBssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTemplateBss",
			Handler:    _TemplateBss_PostTemplateBss_Handler,
		},
		{
			MethodName: "GetTemplateBsses",
			Handler:    _TemplateBss_GetTemplateBsses_Handler,
		},
		{
			MethodName: "GetTemplateBssById",
			Handler:    _TemplateBss_GetTemplateBssById_Handler,
		},
		{
			MethodName: "PutTemplateBssById",
			Handler:    _TemplateBss_PutTemplateBssById_Handler,
		},
		{
			MethodName: "DeleteTemplateBssById",
			Handler:    _TemplateBss_DeleteTemplateBssById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template_bss/template_bss.proto",
}
