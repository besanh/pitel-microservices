// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/conversation_media/conversation_media.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationMediaServiceClient is the client API for ConversationMediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationMediaServiceClient interface {
	GetConversationMedias(ctx context.Context, in *GetConversationMediasRequest, opts ...grpc.CallOption) (*GetConversationMediasResponse, error)
}

type conversationMediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationMediaServiceClient(cc grpc.ClientConnInterface) ConversationMediaServiceClient {
	return &conversationMediaServiceClient{cc}
}

func (c *conversationMediaServiceClient) GetConversationMedias(ctx context.Context, in *GetConversationMediasRequest, opts ...grpc.CallOption) (*GetConversationMediasResponse, error) {
	out := new(GetConversationMediasResponse)
	err := c.cc.Invoke(ctx, "/proto.conversationMedia.ConversationMediaService/GetConversationMedias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationMediaServiceServer is the server API for ConversationMediaService service.
// All implementations should embed UnimplementedConversationMediaServiceServer
// for forward compatibility
type ConversationMediaServiceServer interface {
	GetConversationMedias(context.Context, *GetConversationMediasRequest) (*GetConversationMediasResponse, error)
}

// UnimplementedConversationMediaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationMediaServiceServer struct {
}

func (UnimplementedConversationMediaServiceServer) GetConversationMedias(context.Context, *GetConversationMediasRequest) (*GetConversationMediasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationMedias not implemented")
}

// UnsafeConversationMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationMediaServiceServer will
// result in compilation errors.
type UnsafeConversationMediaServiceServer interface {
	mustEmbedUnimplementedConversationMediaServiceServer()
}

func RegisterConversationMediaServiceServer(s grpc.ServiceRegistrar, srv ConversationMediaServiceServer) {
	s.RegisterService(&ConversationMediaService_ServiceDesc, srv)
}

func _ConversationMediaService_GetConversationMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationMediaServiceServer).GetConversationMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.conversationMedia.ConversationMediaService/GetConversationMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationMediaServiceServer).GetConversationMedias(ctx, req.(*GetConversationMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationMediaService_ServiceDesc is the grpc.ServiceDesc for ConversationMediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationMediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.conversationMedia.ConversationMediaService",
	HandlerType: (*ConversationMediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConversationMedias",
			Handler:    _ConversationMediaService_GetConversationMedias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/conversation_media/conversation_media.proto",
}
