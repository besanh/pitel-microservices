// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/chat_email/chat_email.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatEmailService_GetChatEmails_FullMethodName       = "/proto.chatEmail.ChatEmailService/GetChatEmails"
	ChatEmailService_GetChatEmailById_FullMethodName    = "/proto.chatEmail.ChatEmailService/GetChatEmailById"
	ChatEmailService_InsertChatEmail_FullMethodName     = "/proto.chatEmail.ChatEmailService/InsertChatEmail"
	ChatEmailService_UpdateChatEmailById_FullMethodName = "/proto.chatEmail.ChatEmailService/UpdateChatEmailById"
	ChatEmailService_DeleteChatEmailById_FullMethodName = "/proto.chatEmail.ChatEmailService/DeleteChatEmailById"
)

// ChatEmailServiceClient is the client API for ChatEmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatEmailServiceClient interface {
	GetChatEmails(ctx context.Context, in *GetChatEmailsRequest, opts ...grpc.CallOption) (*GetChatEmailsResponse, error)
	GetChatEmailById(ctx context.Context, in *GetEmailByIdRequest, opts ...grpc.CallOption) (*GetEmailByIdResponse, error)
	InsertChatEmail(ctx context.Context, in *PostChatEmailRequest, opts ...grpc.CallOption) (*PostChatEmailResponse, error)
	UpdateChatEmailById(ctx context.Context, in *PutChatEmailRequest, opts ...grpc.CallOption) (*PutChatEmailResponse, error)
	DeleteChatEmailById(ctx context.Context, in *DeleteChatEmailRequest, opts ...grpc.CallOption) (*DeleteChatEmailResponse, error)
}

type chatEmailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatEmailServiceClient(cc grpc.ClientConnInterface) ChatEmailServiceClient {
	return &chatEmailServiceClient{cc}
}

func (c *chatEmailServiceClient) GetChatEmails(ctx context.Context, in *GetChatEmailsRequest, opts ...grpc.CallOption) (*GetChatEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatEmailsResponse)
	err := c.cc.Invoke(ctx, ChatEmailService_GetChatEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatEmailServiceClient) GetChatEmailById(ctx context.Context, in *GetEmailByIdRequest, opts ...grpc.CallOption) (*GetEmailByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailByIdResponse)
	err := c.cc.Invoke(ctx, ChatEmailService_GetChatEmailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatEmailServiceClient) InsertChatEmail(ctx context.Context, in *PostChatEmailRequest, opts ...grpc.CallOption) (*PostChatEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostChatEmailResponse)
	err := c.cc.Invoke(ctx, ChatEmailService_InsertChatEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatEmailServiceClient) UpdateChatEmailById(ctx context.Context, in *PutChatEmailRequest, opts ...grpc.CallOption) (*PutChatEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChatEmailResponse)
	err := c.cc.Invoke(ctx, ChatEmailService_UpdateChatEmailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatEmailServiceClient) DeleteChatEmailById(ctx context.Context, in *DeleteChatEmailRequest, opts ...grpc.CallOption) (*DeleteChatEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatEmailResponse)
	err := c.cc.Invoke(ctx, ChatEmailService_DeleteChatEmailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatEmailServiceServer is the server API for ChatEmailService service.
// All implementations should embed UnimplementedChatEmailServiceServer
// for forward compatibility
type ChatEmailServiceServer interface {
	GetChatEmails(context.Context, *GetChatEmailsRequest) (*GetChatEmailsResponse, error)
	GetChatEmailById(context.Context, *GetEmailByIdRequest) (*GetEmailByIdResponse, error)
	InsertChatEmail(context.Context, *PostChatEmailRequest) (*PostChatEmailResponse, error)
	UpdateChatEmailById(context.Context, *PutChatEmailRequest) (*PutChatEmailResponse, error)
	DeleteChatEmailById(context.Context, *DeleteChatEmailRequest) (*DeleteChatEmailResponse, error)
}

// UnimplementedChatEmailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatEmailServiceServer struct {
}

func (UnimplementedChatEmailServiceServer) GetChatEmails(context.Context, *GetChatEmailsRequest) (*GetChatEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatEmails not implemented")
}
func (UnimplementedChatEmailServiceServer) GetChatEmailById(context.Context, *GetEmailByIdRequest) (*GetEmailByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatEmailById not implemented")
}
func (UnimplementedChatEmailServiceServer) InsertChatEmail(context.Context, *PostChatEmailRequest) (*PostChatEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatEmail not implemented")
}
func (UnimplementedChatEmailServiceServer) UpdateChatEmailById(context.Context, *PutChatEmailRequest) (*PutChatEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatEmailById not implemented")
}
func (UnimplementedChatEmailServiceServer) DeleteChatEmailById(context.Context, *DeleteChatEmailRequest) (*DeleteChatEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatEmailById not implemented")
}

// UnsafeChatEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatEmailServiceServer will
// result in compilation errors.
type UnsafeChatEmailServiceServer interface {
	mustEmbedUnimplementedChatEmailServiceServer()
}

func RegisterChatEmailServiceServer(s grpc.ServiceRegistrar, srv ChatEmailServiceServer) {
	s.RegisterService(&ChatEmailService_ServiceDesc, srv)
}

func _ChatEmailService_GetChatEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatEmailServiceServer).GetChatEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatEmailService_GetChatEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatEmailServiceServer).GetChatEmails(ctx, req.(*GetChatEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatEmailService_GetChatEmailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatEmailServiceServer).GetChatEmailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatEmailService_GetChatEmailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatEmailServiceServer).GetChatEmailById(ctx, req.(*GetEmailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatEmailService_InsertChatEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatEmailServiceServer).InsertChatEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatEmailService_InsertChatEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatEmailServiceServer).InsertChatEmail(ctx, req.(*PostChatEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatEmailService_UpdateChatEmailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatEmailServiceServer).UpdateChatEmailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatEmailService_UpdateChatEmailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatEmailServiceServer).UpdateChatEmailById(ctx, req.(*PutChatEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatEmailService_DeleteChatEmailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatEmailServiceServer).DeleteChatEmailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatEmailService_DeleteChatEmailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatEmailServiceServer).DeleteChatEmailById(ctx, req.(*DeleteChatEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatEmailService_ServiceDesc is the grpc.ServiceDesc for ChatEmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatEmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatEmail.ChatEmailService",
	HandlerType: (*ChatEmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatEmails",
			Handler:    _ChatEmailService_GetChatEmails_Handler,
		},
		{
			MethodName: "GetChatEmailById",
			Handler:    _ChatEmailService_GetChatEmailById_Handler,
		},
		{
			MethodName: "InsertChatEmail",
			Handler:    _ChatEmailService_InsertChatEmail_Handler,
		},
		{
			MethodName: "UpdateChatEmailById",
			Handler:    _ChatEmailService_UpdateChatEmailById_Handler,
		},
		{
			MethodName: "DeleteChatEmailById",
			Handler:    _ChatEmailService_DeleteChatEmailById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_email/chat_email.proto",
}
