// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_queue_user/chat_queue_user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatQueueUserServiceClient is the client API for ChatQueueUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatQueueUserServiceClient interface {
	InsertChatQueueUser(ctx context.Context, in *PostChatQueueUserRequest, opts ...grpc.CallOption) (*PostChatQueueUserResponse, error)
	UpdateChatQueueUserById(ctx context.Context, in *PutChatQueueUserRequest, opts ...grpc.CallOption) (*PutChatQueueUserResponse, error)
}

type chatQueueUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatQueueUserServiceClient(cc grpc.ClientConnInterface) ChatQueueUserServiceClient {
	return &chatQueueUserServiceClient{cc}
}

func (c *chatQueueUserServiceClient) InsertChatQueueUser(ctx context.Context, in *PostChatQueueUserRequest, opts ...grpc.CallOption) (*PostChatQueueUserResponse, error) {
	out := new(PostChatQueueUserResponse)
	err := c.cc.Invoke(ctx, "/proto.chatQueueUser.ChatQueueUserService/InsertChatQueueUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatQueueUserServiceClient) UpdateChatQueueUserById(ctx context.Context, in *PutChatQueueUserRequest, opts ...grpc.CallOption) (*PutChatQueueUserResponse, error) {
	out := new(PutChatQueueUserResponse)
	err := c.cc.Invoke(ctx, "/proto.chatQueueUser.ChatQueueUserService/UpdateChatQueueUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatQueueUserServiceServer is the server API for ChatQueueUserService service.
// All implementations should embed UnimplementedChatQueueUserServiceServer
// for forward compatibility
type ChatQueueUserServiceServer interface {
	InsertChatQueueUser(context.Context, *PostChatQueueUserRequest) (*PostChatQueueUserResponse, error)
	UpdateChatQueueUserById(context.Context, *PutChatQueueUserRequest) (*PutChatQueueUserResponse, error)
}

// UnimplementedChatQueueUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatQueueUserServiceServer struct {
}

func (UnimplementedChatQueueUserServiceServer) InsertChatQueueUser(context.Context, *PostChatQueueUserRequest) (*PostChatQueueUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatQueueUser not implemented")
}
func (UnimplementedChatQueueUserServiceServer) UpdateChatQueueUserById(context.Context, *PutChatQueueUserRequest) (*PutChatQueueUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatQueueUserById not implemented")
}

// UnsafeChatQueueUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatQueueUserServiceServer will
// result in compilation errors.
type UnsafeChatQueueUserServiceServer interface {
	mustEmbedUnimplementedChatQueueUserServiceServer()
}

func RegisterChatQueueUserServiceServer(s grpc.ServiceRegistrar, srv ChatQueueUserServiceServer) {
	s.RegisterService(&ChatQueueUserService_ServiceDesc, srv)
}

func _ChatQueueUserService_InsertChatQueueUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatQueueUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatQueueUserServiceServer).InsertChatQueueUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatQueueUser.ChatQueueUserService/InsertChatQueueUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatQueueUserServiceServer).InsertChatQueueUser(ctx, req.(*PostChatQueueUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatQueueUserService_UpdateChatQueueUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatQueueUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatQueueUserServiceServer).UpdateChatQueueUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatQueueUser.ChatQueueUserService/UpdateChatQueueUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatQueueUserServiceServer).UpdateChatQueueUserById(ctx, req.(*PutChatQueueUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatQueueUserService_ServiceDesc is the grpc.ServiceDesc for ChatQueueUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatQueueUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatQueueUser.ChatQueueUserService",
	HandlerType: (*ChatQueueUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertChatQueueUser",
			Handler:    _ChatQueueUserService_InsertChatQueueUser_Handler,
		},
		{
			MethodName: "UpdateChatQueueUserById",
			Handler:    _ChatQueueUserService_UpdateChatQueueUserById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_queue_user/chat_queue_user.proto",
}
