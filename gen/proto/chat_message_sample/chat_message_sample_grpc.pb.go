// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_message_sample/chat_message_sample.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSampleServiceClient is the client API for MessageSampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSampleServiceClient interface {
	GetChatMessageSamples(ctx context.Context, in *GetChatMessageSamplesRequest, opts ...grpc.CallOption) (*GetChatMessageSamplesResponse, error)
	GetMessageSampleById(ctx context.Context, in *GetMessageSampleByIdRequest, opts ...grpc.CallOption) (*GetMessageSampleByIdResponse, error)
	InsertMessageSample(ctx context.Context, in *PostMessageSampleRequest, opts ...grpc.CallOption) (*PostMessageSampleResponse, error)
	UpdateMessageSampleById(ctx context.Context, in *PutMessageSampleRequest, opts ...grpc.CallOption) (*PutMessageSampleResponse, error)
	DeleteMessageSampleById(ctx context.Context, in *DeleteMessageSampleRequest, opts ...grpc.CallOption) (*DeleteMessageSampleResponse, error)
}

type messageSampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSampleServiceClient(cc grpc.ClientConnInterface) MessageSampleServiceClient {
	return &messageSampleServiceClient{cc}
}

func (c *messageSampleServiceClient) GetChatMessageSamples(ctx context.Context, in *GetChatMessageSamplesRequest, opts ...grpc.CallOption) (*GetChatMessageSamplesResponse, error) {
	out := new(GetChatMessageSamplesResponse)
	err := c.cc.Invoke(ctx, "/proto.chatMessageSample.MessageSampleService/GetChatMessageSamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSampleServiceClient) GetMessageSampleById(ctx context.Context, in *GetMessageSampleByIdRequest, opts ...grpc.CallOption) (*GetMessageSampleByIdResponse, error) {
	out := new(GetMessageSampleByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.chatMessageSample.MessageSampleService/GetMessageSampleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSampleServiceClient) InsertMessageSample(ctx context.Context, in *PostMessageSampleRequest, opts ...grpc.CallOption) (*PostMessageSampleResponse, error) {
	out := new(PostMessageSampleResponse)
	err := c.cc.Invoke(ctx, "/proto.chatMessageSample.MessageSampleService/InsertMessageSample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSampleServiceClient) UpdateMessageSampleById(ctx context.Context, in *PutMessageSampleRequest, opts ...grpc.CallOption) (*PutMessageSampleResponse, error) {
	out := new(PutMessageSampleResponse)
	err := c.cc.Invoke(ctx, "/proto.chatMessageSample.MessageSampleService/UpdateMessageSampleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageSampleServiceClient) DeleteMessageSampleById(ctx context.Context, in *DeleteMessageSampleRequest, opts ...grpc.CallOption) (*DeleteMessageSampleResponse, error) {
	out := new(DeleteMessageSampleResponse)
	err := c.cc.Invoke(ctx, "/proto.chatMessageSample.MessageSampleService/DeleteMessageSampleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageSampleServiceServer is the server API for MessageSampleService service.
// All implementations should embed UnimplementedMessageSampleServiceServer
// for forward compatibility
type MessageSampleServiceServer interface {
	GetChatMessageSamples(context.Context, *GetChatMessageSamplesRequest) (*GetChatMessageSamplesResponse, error)
	GetMessageSampleById(context.Context, *GetMessageSampleByIdRequest) (*GetMessageSampleByIdResponse, error)
	InsertMessageSample(context.Context, *PostMessageSampleRequest) (*PostMessageSampleResponse, error)
	UpdateMessageSampleById(context.Context, *PutMessageSampleRequest) (*PutMessageSampleResponse, error)
	DeleteMessageSampleById(context.Context, *DeleteMessageSampleRequest) (*DeleteMessageSampleResponse, error)
}

// UnimplementedMessageSampleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMessageSampleServiceServer struct {
}

func (UnimplementedMessageSampleServiceServer) GetChatMessageSamples(context.Context, *GetChatMessageSamplesRequest) (*GetChatMessageSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessageSamples not implemented")
}
func (UnimplementedMessageSampleServiceServer) GetMessageSampleById(context.Context, *GetMessageSampleByIdRequest) (*GetMessageSampleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageSampleById not implemented")
}
func (UnimplementedMessageSampleServiceServer) InsertMessageSample(context.Context, *PostMessageSampleRequest) (*PostMessageSampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMessageSample not implemented")
}
func (UnimplementedMessageSampleServiceServer) UpdateMessageSampleById(context.Context, *PutMessageSampleRequest) (*PutMessageSampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageSampleById not implemented")
}
func (UnimplementedMessageSampleServiceServer) DeleteMessageSampleById(context.Context, *DeleteMessageSampleRequest) (*DeleteMessageSampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageSampleById not implemented")
}

// UnsafeMessageSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSampleServiceServer will
// result in compilation errors.
type UnsafeMessageSampleServiceServer interface {
	mustEmbedUnimplementedMessageSampleServiceServer()
}

func RegisterMessageSampleServiceServer(s grpc.ServiceRegistrar, srv MessageSampleServiceServer) {
	s.RegisterService(&MessageSampleService_ServiceDesc, srv)
}

func _MessageSampleService_GetChatMessageSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatMessageSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSampleServiceServer).GetChatMessageSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatMessageSample.MessageSampleService/GetChatMessageSamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSampleServiceServer).GetChatMessageSamples(ctx, req.(*GetChatMessageSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSampleService_GetMessageSampleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageSampleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSampleServiceServer).GetMessageSampleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatMessageSample.MessageSampleService/GetMessageSampleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSampleServiceServer).GetMessageSampleById(ctx, req.(*GetMessageSampleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSampleService_InsertMessageSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSampleServiceServer).InsertMessageSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatMessageSample.MessageSampleService/InsertMessageSample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSampleServiceServer).InsertMessageSample(ctx, req.(*PostMessageSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSampleService_UpdateMessageSampleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMessageSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSampleServiceServer).UpdateMessageSampleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatMessageSample.MessageSampleService/UpdateMessageSampleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSampleServiceServer).UpdateMessageSampleById(ctx, req.(*PutMessageSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageSampleService_DeleteMessageSampleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageSampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSampleServiceServer).DeleteMessageSampleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatMessageSample.MessageSampleService/DeleteMessageSampleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSampleServiceServer).DeleteMessageSampleById(ctx, req.(*DeleteMessageSampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageSampleService_ServiceDesc is the grpc.ServiceDesc for MessageSampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatMessageSample.MessageSampleService",
	HandlerType: (*MessageSampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatMessageSamples",
			Handler:    _MessageSampleService_GetChatMessageSamples_Handler,
		},
		{
			MethodName: "GetMessageSampleById",
			Handler:    _MessageSampleService_GetMessageSampleById_Handler,
		},
		{
			MethodName: "InsertMessageSample",
			Handler:    _MessageSampleService_InsertMessageSample_Handler,
		},
		{
			MethodName: "UpdateMessageSampleById",
			Handler:    _MessageSampleService_UpdateMessageSampleById_Handler,
		},
		{
			MethodName: "DeleteMessageSampleById",
			Handler:    _MessageSampleService_DeleteMessageSampleById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_message_sample/chat_message_sample.proto",
}
