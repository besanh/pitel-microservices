// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/conversation/conversation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ConversationService_GetConversations_FullMethodName                  = "/proto.conversation.ConversationService/GetConversations"
	ConversationService_GetConversationsWithScrollAPI_FullMethodName     = "/proto.conversation.ConversationService/GetConversationsWithScrollAPI"
	ConversationService_GetConversationsByManager_FullMethodName         = "/proto.conversation.ConversationService/GetConversationsByManager"
	ConversationService_UpdateConversation_FullMethodName                = "/proto.conversation.ConversationService/UpdateConversation"
	ConversationService_UpdateStatusConversation_FullMethodName          = "/proto.conversation.ConversationService/UpdateStatusConversation"
	ConversationService_GetConversationById_FullMethodName               = "/proto.conversation.ConversationService/GetConversationById"
	ConversationService_PutLabelToConversation_FullMethodName            = "/proto.conversation.ConversationService/PutLabelToConversation"
	ConversationService_UpdaterUserPreferenceConversation_FullMethodName = "/proto.conversation.ConversationService/UpdaterUserPreferenceConversation"
)

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationServiceClient interface {
	GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error)
	GetConversationsWithScrollAPI(ctx context.Context, in *GetConversationsWithScrollAPIRequest, opts ...grpc.CallOption) (*GetConversationsWithScrollAPIResponse, error)
	GetConversationsByManager(ctx context.Context, in *GetConversationsByManagerRequest, opts ...grpc.CallOption) (*GetConversationsByManagerResponse, error)
	UpdateConversation(ctx context.Context, in *PutConversationRequest, opts ...grpc.CallOption) (*PutConversationResponse, error)
	UpdateStatusConversation(ctx context.Context, in *PutConversationStatusRequest, opts ...grpc.CallOption) (*PutConversationStatusResponse, error)
	GetConversationById(ctx context.Context, in *GetConversationByIdRequest, opts ...grpc.CallOption) (*GetConversationByIdResponse, error)
	PutLabelToConversation(ctx context.Context, in *PutLabelToConversationRequest, opts ...grpc.CallOption) (*PutLabelToConversationResponse, error)
	UpdaterUserPreferenceConversation(ctx context.Context, in *UpdaterUserPreferenceConversationRequest, opts ...grpc.CallOption) (*UpdaterUserPreferenceConversationResponse, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationsResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetConversationsWithScrollAPI(ctx context.Context, in *GetConversationsWithScrollAPIRequest, opts ...grpc.CallOption) (*GetConversationsWithScrollAPIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationsWithScrollAPIResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetConversationsWithScrollAPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetConversationsByManager(ctx context.Context, in *GetConversationsByManagerRequest, opts ...grpc.CallOption) (*GetConversationsByManagerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationsByManagerResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetConversationsByManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) UpdateConversation(ctx context.Context, in *PutConversationRequest, opts ...grpc.CallOption) (*PutConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_UpdateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) UpdateStatusConversation(ctx context.Context, in *PutConversationStatusRequest, opts ...grpc.CallOption) (*PutConversationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutConversationStatusResponse)
	err := c.cc.Invoke(ctx, ConversationService_UpdateStatusConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetConversationById(ctx context.Context, in *GetConversationByIdRequest, opts ...grpc.CallOption) (*GetConversationByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationByIdResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetConversationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) PutLabelToConversation(ctx context.Context, in *PutLabelToConversationRequest, opts ...grpc.CallOption) (*PutLabelToConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutLabelToConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_PutLabelToConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) UpdaterUserPreferenceConversation(ctx context.Context, in *UpdaterUserPreferenceConversationRequest, opts ...grpc.CallOption) (*UpdaterUserPreferenceConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdaterUserPreferenceConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_UpdaterUserPreferenceConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations should embed UnimplementedConversationServiceServer
// for forward compatibility
type ConversationServiceServer interface {
	GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error)
	GetConversationsWithScrollAPI(context.Context, *GetConversationsWithScrollAPIRequest) (*GetConversationsWithScrollAPIResponse, error)
	GetConversationsByManager(context.Context, *GetConversationsByManagerRequest) (*GetConversationsByManagerResponse, error)
	UpdateConversation(context.Context, *PutConversationRequest) (*PutConversationResponse, error)
	UpdateStatusConversation(context.Context, *PutConversationStatusRequest) (*PutConversationStatusResponse, error)
	GetConversationById(context.Context, *GetConversationByIdRequest) (*GetConversationByIdResponse, error)
	PutLabelToConversation(context.Context, *PutLabelToConversationRequest) (*PutLabelToConversationResponse, error)
	UpdaterUserPreferenceConversation(context.Context, *UpdaterUserPreferenceConversationRequest) (*UpdaterUserPreferenceConversationResponse, error)
}

// UnimplementedConversationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationServiceServer struct {
}

func (UnimplementedConversationServiceServer) GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (UnimplementedConversationServiceServer) GetConversationsWithScrollAPI(context.Context, *GetConversationsWithScrollAPIRequest) (*GetConversationsWithScrollAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationsWithScrollAPI not implemented")
}
func (UnimplementedConversationServiceServer) GetConversationsByManager(context.Context, *GetConversationsByManagerRequest) (*GetConversationsByManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationsByManager not implemented")
}
func (UnimplementedConversationServiceServer) UpdateConversation(context.Context, *PutConversationRequest) (*PutConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedConversationServiceServer) UpdateStatusConversation(context.Context, *PutConversationStatusRequest) (*PutConversationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusConversation not implemented")
}
func (UnimplementedConversationServiceServer) GetConversationById(context.Context, *GetConversationByIdRequest) (*GetConversationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationById not implemented")
}
func (UnimplementedConversationServiceServer) PutLabelToConversation(context.Context, *PutLabelToConversationRequest) (*PutLabelToConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLabelToConversation not implemented")
}
func (UnimplementedConversationServiceServer) UpdaterUserPreferenceConversation(context.Context, *UpdaterUserPreferenceConversationRequest) (*UpdaterUserPreferenceConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdaterUserPreferenceConversation not implemented")
}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversations(ctx, req.(*GetConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetConversationsWithScrollAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsWithScrollAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversationsWithScrollAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetConversationsWithScrollAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversationsWithScrollAPI(ctx, req.(*GetConversationsWithScrollAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetConversationsByManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsByManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversationsByManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetConversationsByManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversationsByManager(ctx, req.(*GetConversationsByManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).UpdateConversation(ctx, req.(*PutConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_UpdateStatusConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConversationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).UpdateStatusConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_UpdateStatusConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).UpdateStatusConversation(ctx, req.(*PutConversationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetConversationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversationById(ctx, req.(*GetConversationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_PutLabelToConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLabelToConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).PutLabelToConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_PutLabelToConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).PutLabelToConversation(ctx, req.(*PutLabelToConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_UpdaterUserPreferenceConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdaterUserPreferenceConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).UpdaterUserPreferenceConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_UpdaterUserPreferenceConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).UpdaterUserPreferenceConversation(ctx, req.(*UpdaterUserPreferenceConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.conversation.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConversations",
			Handler:    _ConversationService_GetConversations_Handler,
		},
		{
			MethodName: "GetConversationsWithScrollAPI",
			Handler:    _ConversationService_GetConversationsWithScrollAPI_Handler,
		},
		{
			MethodName: "GetConversationsByManager",
			Handler:    _ConversationService_GetConversationsByManager_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _ConversationService_UpdateConversation_Handler,
		},
		{
			MethodName: "UpdateStatusConversation",
			Handler:    _ConversationService_UpdateStatusConversation_Handler,
		},
		{
			MethodName: "GetConversationById",
			Handler:    _ConversationService_GetConversationById_Handler,
		},
		{
			MethodName: "PutLabelToConversation",
			Handler:    _ConversationService_PutLabelToConversation_Handler,
		},
		{
			MethodName: "UpdaterUserPreferenceConversation",
			Handler:    _ConversationService_UpdaterUserPreferenceConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/conversation/conversation.proto",
}
