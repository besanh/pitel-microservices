// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: proto/conversation/conversation.proto

package pb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConversationCustomView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId               string       `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ConversationId         string       `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType       string       `protobuf:"bytes,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	AppId                  string       `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId                   string       `protobuf:"bytes,5,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	OaName                 string       `protobuf:"bytes,6,opt,name=oa_name,json=oaName,proto3" json:"oa_name,omitempty"`
	OaAvatar               string       `protobuf:"bytes,7,opt,name=oa_avatar,json=oaAvatar,proto3" json:"oa_avatar,omitempty"`
	ShareInfo              *ShareInfo   `protobuf:"bytes,8,opt,name=share_info,json=shareInfo,proto3" json:"share_info,omitempty"`
	ExternalUserId         string       `protobuf:"bytes,9,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Username               string       `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Avatar                 string       `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Major                  bool         `protobuf:"varint,12,opt,name=major,proto3" json:"major,omitempty"`
	Following              bool         `protobuf:"varint,13,opt,name=following,proto3" json:"following,omitempty"`
	Label                  []*ChatLabel `protobuf:"bytes,14,rep,name=label,proto3" json:"label,omitempty"`
	IsDone                 bool         `protobuf:"varint,15,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	IsDoneAt               string       `protobuf:"bytes,16,opt,name=is_done_at,json=isDoneAt,proto3" json:"is_done_at,omitempty"`
	IsDoneBy               string       `protobuf:"bytes,17,opt,name=is_done_by,json=isDoneBy,proto3" json:"is_done_by,omitempty"`
	CreatedAt              string       `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              string       `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TotalUnread            int64        `protobuf:"varint,20,opt,name=total_unread,json=totalUnread,proto3" json:"total_unread,omitempty"`
	LatestMessageContent   string       `protobuf:"bytes,21,opt,name=latest_message_content,json=latestMessageContent,proto3" json:"latest_message_content,omitempty"`
	LatestMessageDirection string       `protobuf:"bytes,22,opt,name=latest_message_direction,json=latestMessageDirection,proto3" json:"latest_message_direction,omitempty"`
	ExternalConversationId string       `protobuf:"bytes,23,opt,name=external_conversation_id,json=externalConversationId,proto3" json:"external_conversation_id,omitempty"`
}

func (x *ConversationCustomView) Reset() {
	*x = ConversationCustomView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCustomView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCustomView) ProtoMessage() {}

func (x *ConversationCustomView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCustomView.ProtoReflect.Descriptor instead.
func (*ConversationCustomView) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *ConversationCustomView) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ConversationCustomView) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationCustomView) GetConversationType() string {
	if x != nil {
		return x.ConversationType
	}
	return ""
}

func (x *ConversationCustomView) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ConversationCustomView) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *ConversationCustomView) GetOaName() string {
	if x != nil {
		return x.OaName
	}
	return ""
}

func (x *ConversationCustomView) GetOaAvatar() string {
	if x != nil {
		return x.OaAvatar
	}
	return ""
}

func (x *ConversationCustomView) GetShareInfo() *ShareInfo {
	if x != nil {
		return x.ShareInfo
	}
	return nil
}

func (x *ConversationCustomView) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *ConversationCustomView) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ConversationCustomView) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ConversationCustomView) GetMajor() bool {
	if x != nil {
		return x.Major
	}
	return false
}

func (x *ConversationCustomView) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *ConversationCustomView) GetLabel() []*ChatLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ConversationCustomView) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *ConversationCustomView) GetIsDoneAt() string {
	if x != nil {
		return x.IsDoneAt
	}
	return ""
}

func (x *ConversationCustomView) GetIsDoneBy() string {
	if x != nil {
		return x.IsDoneBy
	}
	return ""
}

func (x *ConversationCustomView) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ConversationCustomView) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ConversationCustomView) GetTotalUnread() int64 {
	if x != nil {
		return x.TotalUnread
	}
	return 0
}

func (x *ConversationCustomView) GetLatestMessageContent() string {
	if x != nil {
		return x.LatestMessageContent
	}
	return ""
}

func (x *ConversationCustomView) GetLatestMessageDirection() string {
	if x != nil {
		return x.LatestMessageDirection
	}
	return ""
}

func (x *ConversationCustomView) GetExternalConversationId() string {
	if x != nil {
		return x.ExternalConversationId
	}
	return ""
}

type ConversationView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId               string       `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ConversationId         string       `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType       string       `protobuf:"bytes,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	AppId                  string       `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId                   string       `protobuf:"bytes,5,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	OaName                 string       `protobuf:"bytes,6,opt,name=oa_name,json=oaName,proto3" json:"oa_name,omitempty"`
	OaAvatar               string       `protobuf:"bytes,7,opt,name=oa_avatar,json=oaAvatar,proto3" json:"oa_avatar,omitempty"`
	ShareInfo              *ShareInfo   `protobuf:"bytes,8,opt,name=share_info,json=shareInfo,proto3" json:"share_info,omitempty"`
	ExternalUserId         string       `protobuf:"bytes,9,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Username               string       `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Avatar                 string       `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Major                  bool         `protobuf:"varint,12,opt,name=major,proto3" json:"major,omitempty"`
	Following              bool         `protobuf:"varint,13,opt,name=following,proto3" json:"following,omitempty"`
	Label                  []*ChatLabel `protobuf:"bytes,14,rep,name=label,proto3" json:"label,omitempty"`
	IsDone                 bool         `protobuf:"varint,15,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	IsDoneAt               string       `protobuf:"bytes,16,opt,name=is_done_at,json=isDoneAt,proto3" json:"is_done_at,omitempty"`
	IsDoneBy               string       `protobuf:"bytes,17,opt,name=is_done_by,json=isDoneBy,proto3" json:"is_done_by,omitempty"`
	CreatedAt              string       `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              string       `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TotalUnread            int64        `protobuf:"varint,20,opt,name=total_unread,json=totalUnread,proto3" json:"total_unread,omitempty"`
	LatestMessageContent   string       `protobuf:"bytes,21,opt,name=latest_message_content,json=latestMessageContent,proto3" json:"latest_message_content,omitempty"`
	LatestMessageDirection string       `protobuf:"bytes,22,opt,name=latest_message_direction,json=latestMessageDirection,proto3" json:"latest_message_direction,omitempty"`
	ExternalConversationId string       `protobuf:"bytes,23,opt,name=external_conversation_id,json=externalConversationId,proto3" json:"external_conversation_id,omitempty"`
}

func (x *ConversationView) Reset() {
	*x = ConversationView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationView) ProtoMessage() {}

func (x *ConversationView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationView.ProtoReflect.Descriptor instead.
func (*ConversationView) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationView) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ConversationView) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationView) GetConversationType() string {
	if x != nil {
		return x.ConversationType
	}
	return ""
}

func (x *ConversationView) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ConversationView) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *ConversationView) GetOaName() string {
	if x != nil {
		return x.OaName
	}
	return ""
}

func (x *ConversationView) GetOaAvatar() string {
	if x != nil {
		return x.OaAvatar
	}
	return ""
}

func (x *ConversationView) GetShareInfo() *ShareInfo {
	if x != nil {
		return x.ShareInfo
	}
	return nil
}

func (x *ConversationView) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *ConversationView) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ConversationView) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ConversationView) GetMajor() bool {
	if x != nil {
		return x.Major
	}
	return false
}

func (x *ConversationView) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *ConversationView) GetLabel() []*ChatLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ConversationView) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *ConversationView) GetIsDoneAt() string {
	if x != nil {
		return x.IsDoneAt
	}
	return ""
}

func (x *ConversationView) GetIsDoneBy() string {
	if x != nil {
		return x.IsDoneBy
	}
	return ""
}

func (x *ConversationView) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ConversationView) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ConversationView) GetTotalUnread() int64 {
	if x != nil {
		return x.TotalUnread
	}
	return 0
}

func (x *ConversationView) GetLatestMessageContent() string {
	if x != nil {
		return x.LatestMessageContent
	}
	return ""
}

func (x *ConversationView) GetLatestMessageDirection() string {
	if x != nil {
		return x.LatestMessageDirection
	}
	return ""
}

func (x *ConversationView) GetExternalConversationId() string {
	if x != nil {
		return x.ExternalConversationId
	}
	return ""
}

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId               string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ConversationId         string                 `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	ConversationType       string                 `protobuf:"bytes,3,opt,name=conversation_type,json=conversationType,proto3" json:"conversation_type,omitempty"`
	AppId                  string                 `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId                   string                 `protobuf:"bytes,5,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	OaName                 string                 `protobuf:"bytes,6,opt,name=oa_name,json=oaName,proto3" json:"oa_name,omitempty"`
	OaAvatar               string                 `protobuf:"bytes,7,opt,name=oa_avatar,json=oaAvatar,proto3" json:"oa_avatar,omitempty"`
	ShareInfo              *ShareInfo             `protobuf:"bytes,8,opt,name=share_info,json=shareInfo,proto3" json:"share_info,omitempty"`
	ExternalUserId         string                 `protobuf:"bytes,9,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Username               string                 `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Avatar                 string                 `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Major                  bool                   `protobuf:"varint,12,opt,name=major,proto3" json:"major,omitempty"`
	Following              bool                   `protobuf:"varint,13,opt,name=following,proto3" json:"following,omitempty"`
	Label                  []*ChatLabel           `protobuf:"bytes,14,rep,name=label,proto3" json:"label,omitempty"`
	IsDone                 bool                   `protobuf:"varint,15,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	IsDoneAt               *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=is_done_at,json=isDoneAt,proto3" json:"is_done_at,omitempty"`
	IsDoneBy               string                 `protobuf:"bytes,17,opt,name=is_done_by,json=isDoneBy,proto3" json:"is_done_by,omitempty"`
	CreatedAt              string                 `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              string                 `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExternalConversationId string                 `protobuf:"bytes,20,opt,name=external_conversation_id,json=externalConversationId,proto3" json:"external_conversation_id,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *Conversation) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Conversation) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Conversation) GetConversationType() string {
	if x != nil {
		return x.ConversationType
	}
	return ""
}

func (x *Conversation) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Conversation) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *Conversation) GetOaName() string {
	if x != nil {
		return x.OaName
	}
	return ""
}

func (x *Conversation) GetOaAvatar() string {
	if x != nil {
		return x.OaAvatar
	}
	return ""
}

func (x *Conversation) GetShareInfo() *ShareInfo {
	if x != nil {
		return x.ShareInfo
	}
	return nil
}

func (x *Conversation) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *Conversation) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Conversation) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Conversation) GetMajor() bool {
	if x != nil {
		return x.Major
	}
	return false
}

func (x *Conversation) GetFollowing() bool {
	if x != nil {
		return x.Following
	}
	return false
}

func (x *Conversation) GetLabel() []*ChatLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Conversation) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *Conversation) GetIsDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IsDoneAt
	}
	return nil
}

func (x *Conversation) GetIsDoneBy() string {
	if x != nil {
		return x.IsDoneBy
	}
	return ""
}

func (x *Conversation) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Conversation) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Conversation) GetExternalConversationId() string {
	if x != nil {
		return x.ExternalConversationId
	}
	return ""
}

type ShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullname    string `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	City        string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	District    string `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
}

func (x *ShareInfo) Reset() {
	*x = ShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareInfo) ProtoMessage() {}

func (x *ShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareInfo.ProtoReflect.Descriptor instead.
func (*ShareInfo) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *ShareInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *ShareInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ShareInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ShareInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShareInfo) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

type ChatLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId        string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	AppId           string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId            string                 `protobuf:"bytes,3,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	LabelName       string                 `protobuf:"bytes,4,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	LabelType       string                 `protobuf:"bytes,5,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`
	ExternalLabelId string                 `protobuf:"bytes,6,opt,name=external_label_id,json=externalLabelId,proto3" json:"external_label_id,omitempty"`
	LabelColor      string                 `protobuf:"bytes,7,opt,name=label_color,json=labelColor,proto3" json:"label_color,omitempty"`
	LabelStatus     bool                   `protobuf:"varint,8,opt,name=label_status,json=labelStatus,proto3" json:"label_status,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy       string                 `protobuf:"bytes,10,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Id              string                 `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChatLabel) Reset() {
	*x = ChatLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLabel) ProtoMessage() {}

func (x *ChatLabel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLabel.ProtoReflect.Descriptor instead.
func (*ChatLabel) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *ChatLabel) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ChatLabel) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ChatLabel) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *ChatLabel) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

func (x *ChatLabel) GetLabelType() string {
	if x != nil {
		return x.LabelType
	}
	return ""
}

func (x *ChatLabel) GetExternalLabelId() string {
	if x != nil {
		return x.ExternalLabelId
	}
	return ""
}

func (x *ChatLabel) GetLabelColor() string {
	if x != nil {
		return x.LabelColor
	}
	return ""
}

func (x *ChatLabel) GetLabelStatus() bool {
	if x != nil {
		return x.LabelStatus
	}
	return false
}

func (x *ChatLabel) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ChatLabel) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ChatLabel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChatLabel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ChatLabel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// get conversations
type GetConversationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	IsDone         string   `protobuf:"bytes,3,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	Major          string   `protobuf:"bytes,4,opt,name=major,proto3" json:"major,omitempty"`
	Following      string   `protobuf:"bytes,5,opt,name=following,proto3" json:"following,omitempty"`
	AppId          []string `protobuf:"bytes,6,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ConversationId []string `protobuf:"bytes,7,rep,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Username       string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	PhoneNumber    string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email          string   `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetConversationsRequest) Reset() {
	*x = GetConversationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsRequest) ProtoMessage() {}

func (x *GetConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsRequest.ProtoReflect.Descriptor instead.
func (*GetConversationsRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *GetConversationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetConversationsRequest) GetIsDone() string {
	if x != nil {
		return x.IsDone
	}
	return ""
}

func (x *GetConversationsRequest) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *GetConversationsRequest) GetFollowing() string {
	if x != nil {
		return x.Following
	}
	return ""
}

func (x *GetConversationsRequest) GetAppId() []string {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *GetConversationsRequest) GetConversationId() []string {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *GetConversationsRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetConversationsRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetConversationsRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetConversationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string                    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ConversationCustomView `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Total   int32                     `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Limit   int32                     `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32                     `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetConversationsResponse) Reset() {
	*x = GetConversationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsResponse) ProtoMessage() {}

func (x *GetConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *GetConversationsResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetConversationsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConversationsResponse) GetData() []*ConversationCustomView {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetConversationsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConversationsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// get conversations by manager
type GetConversationsByManagerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	IsDone         string   `protobuf:"bytes,3,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	Major          string   `protobuf:"bytes,4,opt,name=major,proto3" json:"major,omitempty"`
	Following      string   `protobuf:"bytes,5,opt,name=following,proto3" json:"following,omitempty"`
	AppId          []string `protobuf:"bytes,6,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ConversationId []string `protobuf:"bytes,7,rep,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Username       string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	PhoneNumber    string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email          string   `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetConversationsByManagerRequest) Reset() {
	*x = GetConversationsByManagerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsByManagerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsByManagerRequest) ProtoMessage() {}

func (x *GetConversationsByManagerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsByManagerRequest.ProtoReflect.Descriptor instead.
func (*GetConversationsByManagerRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *GetConversationsByManagerRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsByManagerRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetConversationsByManagerRequest) GetIsDone() string {
	if x != nil {
		return x.IsDone
	}
	return ""
}

func (x *GetConversationsByManagerRequest) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *GetConversationsByManagerRequest) GetFollowing() string {
	if x != nil {
		return x.Following
	}
	return ""
}

func (x *GetConversationsByManagerRequest) GetAppId() []string {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *GetConversationsByManagerRequest) GetConversationId() []string {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *GetConversationsByManagerRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetConversationsByManagerRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetConversationsByManagerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetConversationsByManagerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string              `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ConversationView `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Total   int32               `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Limit   int32               `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32               `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetConversationsByManagerResponse) Reset() {
	*x = GetConversationsByManagerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsByManagerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsByManagerResponse) ProtoMessage() {}

func (x *GetConversationsByManagerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsByManagerResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsByManagerResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *GetConversationsByManagerResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetConversationsByManagerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConversationsByManagerResponse) GetData() []*ConversationView {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetConversationsByManagerResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConversationsByManagerResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsByManagerResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// get conversations by manager with scroll
type GetConversationsByManagerWithScrollAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	ScrollId       string   `protobuf:"bytes,2,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
	IsDone         string   `protobuf:"bytes,3,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	Major          string   `protobuf:"bytes,4,opt,name=major,proto3" json:"major,omitempty"`
	Following      string   `protobuf:"bytes,5,opt,name=following,proto3" json:"following,omitempty"`
	AppId          []string `protobuf:"bytes,6,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ConversationId []string `protobuf:"bytes,7,rep,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Username       string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	PhoneNumber    string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email          string   `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetConversationsByManagerWithScrollAPIRequest) Reset() {
	*x = GetConversationsByManagerWithScrollAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsByManagerWithScrollAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsByManagerWithScrollAPIRequest) ProtoMessage() {}

func (x *GetConversationsByManagerWithScrollAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsByManagerWithScrollAPIRequest.ProtoReflect.Descriptor instead.
func (*GetConversationsByManagerWithScrollAPIRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetIsDone() string {
	if x != nil {
		return x.IsDone
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetFollowing() string {
	if x != nil {
		return x.Following
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetAppId() []string {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetConversationId() []string {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetConversationsByManagerWithScrollAPIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string              `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data     []*ConversationView `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Total    int32               `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Limit    int32               `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ScrollId string              `protobuf:"bytes,6,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
}

func (x *GetConversationsByManagerWithScrollAPIResponse) Reset() {
	*x = GetConversationsByManagerWithScrollAPIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsByManagerWithScrollAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsByManagerWithScrollAPIResponse) ProtoMessage() {}

func (x *GetConversationsByManagerWithScrollAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsByManagerWithScrollAPIResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsByManagerWithScrollAPIResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *GetConversationsByManagerWithScrollAPIResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConversationsByManagerWithScrollAPIResponse) GetData() []*ConversationView {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetConversationsByManagerWithScrollAPIResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConversationsByManagerWithScrollAPIResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsByManagerWithScrollAPIResponse) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

// get conversations with scroll
type GetConversationsWithScrollAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	ScrollId       string   `protobuf:"bytes,2,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
	IsDone         string   `protobuf:"bytes,3,opt,name=is_done,json=isDone,proto3" json:"is_done,omitempty"`
	Major          string   `protobuf:"bytes,4,opt,name=major,proto3" json:"major,omitempty"`
	Following      string   `protobuf:"bytes,5,opt,name=following,proto3" json:"following,omitempty"`
	AppId          []string `protobuf:"bytes,6,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ConversationId []string `protobuf:"bytes,7,rep,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Username       string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	PhoneNumber    string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email          string   `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetConversationsWithScrollAPIRequest) Reset() {
	*x = GetConversationsWithScrollAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsWithScrollAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsWithScrollAPIRequest) ProtoMessage() {}

func (x *GetConversationsWithScrollAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsWithScrollAPIRequest.ProtoReflect.Descriptor instead.
func (*GetConversationsWithScrollAPIRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *GetConversationsWithScrollAPIRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsWithScrollAPIRequest) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

func (x *GetConversationsWithScrollAPIRequest) GetIsDone() string {
	if x != nil {
		return x.IsDone
	}
	return ""
}

func (x *GetConversationsWithScrollAPIRequest) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *GetConversationsWithScrollAPIRequest) GetFollowing() string {
	if x != nil {
		return x.Following
	}
	return ""
}

func (x *GetConversationsWithScrollAPIRequest) GetAppId() []string {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *GetConversationsWithScrollAPIRequest) GetConversationId() []string {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *GetConversationsWithScrollAPIRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetConversationsWithScrollAPIRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *GetConversationsWithScrollAPIRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetConversationsWithScrollAPIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string                    `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data     []*ConversationCustomView `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Total    int32                     `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Limit    int32                     `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ScrollId string                    `protobuf:"bytes,6,opt,name=scroll_id,json=scrollId,proto3" json:"scroll_id,omitempty"`
}

func (x *GetConversationsWithScrollAPIResponse) Reset() {
	*x = GetConversationsWithScrollAPIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsWithScrollAPIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsWithScrollAPIResponse) ProtoMessage() {}

func (x *GetConversationsWithScrollAPIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsWithScrollAPIResponse.ProtoReflect.Descriptor instead.
func (*GetConversationsWithScrollAPIResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *GetConversationsWithScrollAPIResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetConversationsWithScrollAPIResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConversationsWithScrollAPIResponse) GetData() []*ConversationCustomView {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetConversationsWithScrollAPIResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConversationsWithScrollAPIResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetConversationsWithScrollAPIResponse) GetScrollId() string {
	if x != nil {
		return x.ScrollId
	}
	return ""
}

// update conversation
type PutConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId        string `protobuf:"bytes,2,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Fullname    string `protobuf:"bytes,4,opt,name=fullname,proto3" json:"fullname,omitempty"`
	PhoneNumber string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Address     string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	City        string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	District    string `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
}

func (x *PutConversationRequest) Reset() {
	*x = PutConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConversationRequest) ProtoMessage() {}

func (x *PutConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConversationRequest.ProtoReflect.Descriptor instead.
func (*PutConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *PutConversationRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PutConversationRequest) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *PutConversationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutConversationRequest) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *PutConversationRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PutConversationRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PutConversationRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PutConversationRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

type PutConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PutConversationResponse) Reset() {
	*x = PutConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConversationResponse) ProtoMessage() {}

func (x *PutConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConversationResponse.ProtoReflect.Descriptor instead.
func (*PutConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *PutConversationResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PutConversationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// update queue status
type PutConversationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PutConversationStatusRequest) Reset() {
	*x = PutConversationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConversationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConversationStatusRequest) ProtoMessage() {}

func (x *PutConversationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConversationStatusRequest.ProtoReflect.Descriptor instead.
func (*PutConversationStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *PutConversationStatusRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PutConversationStatusRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *PutConversationStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PutConversationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PutConversationStatusResponse) Reset() {
	*x = PutConversationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConversationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConversationStatusResponse) ProtoMessage() {}

func (x *PutConversationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConversationStatusResponse.ProtoReflect.Descriptor instead.
func (*PutConversationStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{16}
}

func (x *PutConversationStatusResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PutConversationStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// get conversation by id
type GetConversationByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId  string `protobuf:"bytes,2,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConversationByIdRequest) Reset() {
	*x = GetConversationByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationByIdRequest) ProtoMessage() {}

func (x *GetConversationByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationByIdRequest.ProtoReflect.Descriptor instead.
func (*GetConversationByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{17}
}

func (x *GetConversationByIdRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GetConversationByIdRequest) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *GetConversationByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetConversationByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string        `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Conversation `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetConversationByIdResponse) Reset() {
	*x = GetConversationByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationByIdResponse) ProtoMessage() {}

func (x *GetConversationByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationByIdResponse.ProtoReflect.Descriptor instead.
func (*GetConversationByIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{18}
}

func (x *GetConversationByIdResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetConversationByIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConversationByIdResponse) GetData() *Conversation {
	if x != nil {
		return x.Data
	}
	return nil
}

// put label
type PutLabelToConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelType       string `protobuf:"bytes,1,opt,name=label_type,json=labelType,proto3" json:"label_type,omitempty"`
	AppId           string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId            string `protobuf:"bytes,3,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	LabelName       string `protobuf:"bytes,4,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	LabelId         string `protobuf:"bytes,5,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	ExternalLabelId string `protobuf:"bytes,6,opt,name=external_label_id,json=externalLabelId,proto3" json:"external_label_id,omitempty"`
	ExternalUserId  string `protobuf:"bytes,7,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	ConversationId  string `protobuf:"bytes,8,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Action          string `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"` // create, update, remove label
	LabelColor      string `protobuf:"bytes,10,opt,name=label_color,json=labelColor,proto3" json:"label_color,omitempty"`
}

func (x *PutLabelToConversationRequest) Reset() {
	*x = PutLabelToConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutLabelToConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutLabelToConversationRequest) ProtoMessage() {}

func (x *PutLabelToConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutLabelToConversationRequest.ProtoReflect.Descriptor instead.
func (*PutLabelToConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{19}
}

func (x *PutLabelToConversationRequest) GetLabelType() string {
	if x != nil {
		return x.LabelType
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetLabelId() string {
	if x != nil {
		return x.LabelId
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetExternalLabelId() string {
	if x != nil {
		return x.ExternalLabelId
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PutLabelToConversationRequest) GetLabelColor() string {
	if x != nil {
		return x.LabelColor
	}
	return ""
}

type PutLabelToConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutLabelToConversationResponse) Reset() {
	*x = PutLabelToConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutLabelToConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutLabelToConversationResponse) ProtoMessage() {}

func (x *PutLabelToConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutLabelToConversationResponse.ProtoReflect.Descriptor instead.
func (*PutLabelToConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{20}
}

func (x *PutLabelToConversationResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PutLabelToConversationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PutLabelToConversationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// preference
type UpdaterUserPreferenceConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OaId            string `protobuf:"bytes,2,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	ConversationId  string `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	PreferenceValue string `protobuf:"bytes,4,opt,name=preference_value,json=preferenceValue,proto3" json:"preference_value,omitempty"`
	PreferenceType  string `protobuf:"bytes,5,opt,name=preference_type,json=preferenceType,proto3" json:"preference_type,omitempty"` // major, following
}

func (x *UpdaterUserPreferenceConversationRequest) Reset() {
	*x = UpdaterUserPreferenceConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdaterUserPreferenceConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdaterUserPreferenceConversationRequest) ProtoMessage() {}

func (x *UpdaterUserPreferenceConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdaterUserPreferenceConversationRequest.ProtoReflect.Descriptor instead.
func (*UpdaterUserPreferenceConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{21}
}

func (x *UpdaterUserPreferenceConversationRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UpdaterUserPreferenceConversationRequest) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *UpdaterUserPreferenceConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *UpdaterUserPreferenceConversationRequest) GetPreferenceValue() string {
	if x != nil {
		return x.PreferenceValue
	}
	return ""
}

func (x *UpdaterUserPreferenceConversationRequest) GetPreferenceType() string {
	if x != nil {
		return x.PreferenceType
	}
	return ""
}

type UpdaterUserPreferenceConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdaterUserPreferenceConversationResponse) Reset() {
	*x = UpdaterUserPreferenceConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conversation_conversation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdaterUserPreferenceConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdaterUserPreferenceConversationResponse) ProtoMessage() {}

func (x *UpdaterUserPreferenceConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conversation_conversation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdaterUserPreferenceConversationResponse.ProtoReflect.Descriptor instead.
func (*UpdaterUserPreferenceConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_conversation_conversation_proto_rawDescGZIP(), []int{22}
}

func (x *UpdaterUserPreferenceConversationResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdaterUserPreferenceConversationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_conversation_conversation_proto protoreflect.FileDescriptor

var file_proto_conversation_conversation_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x06, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x61, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcc, 0x06, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x61, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd1, 0x05, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x3c, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12,
	0x33, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x44,
	0x6f, 0x6e, 0x65, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x94, 0x01,
	0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x22, 0xc6, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa9, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x44, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xcf, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xc4, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xde, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x50, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x50, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x76, 0x0a, 0x1c, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x1d, 0x50, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x6f, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f,
	0x61, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x02, 0x0a, 0x1d, 0x50, 0x75, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x6f, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x5e, 0x0a, 0x1e, 0x50, 0x75, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x29,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x9f, 0x0d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xbe, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x41, 0x50, 0x49, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x12, 0xb3, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xe1, 0x01, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x41, 0x50, 0x49, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0xa9, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x1a, 0x2f, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f, 0x61,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xac, 0x01, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x62, 0x73, 0x73, 0x2d,
	0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f,
	0x61, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x16, 0x50,
	0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x1a, 0x2c, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0xd1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x1a, 0x24, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x34, 0x76, 0x6e, 0x2f, 0x66,
	0x69, 0x6e, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_conversation_conversation_proto_rawDescOnce sync.Once
	file_proto_conversation_conversation_proto_rawDescData = file_proto_conversation_conversation_proto_rawDesc
)

func file_proto_conversation_conversation_proto_rawDescGZIP() []byte {
	file_proto_conversation_conversation_proto_rawDescOnce.Do(func() {
		file_proto_conversation_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_conversation_conversation_proto_rawDescData)
	})
	return file_proto_conversation_conversation_proto_rawDescData
}

var file_proto_conversation_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_conversation_conversation_proto_goTypes = []any{
	(*ConversationCustomView)(nil),                         // 0: proto.conversation.ConversationCustomView
	(*ConversationView)(nil),                               // 1: proto.conversation.ConversationView
	(*Conversation)(nil),                                   // 2: proto.conversation.Conversation
	(*ShareInfo)(nil),                                      // 3: proto.conversation.ShareInfo
	(*ChatLabel)(nil),                                      // 4: proto.conversation.ChatLabel
	(*GetConversationsRequest)(nil),                        // 5: proto.conversation.GetConversationsRequest
	(*GetConversationsResponse)(nil),                       // 6: proto.conversation.GetConversationsResponse
	(*GetConversationsByManagerRequest)(nil),               // 7: proto.conversation.GetConversationsByManagerRequest
	(*GetConversationsByManagerResponse)(nil),              // 8: proto.conversation.GetConversationsByManagerResponse
	(*GetConversationsByManagerWithScrollAPIRequest)(nil),  // 9: proto.conversation.GetConversationsByManagerWithScrollAPIRequest
	(*GetConversationsByManagerWithScrollAPIResponse)(nil), // 10: proto.conversation.GetConversationsByManagerWithScrollAPIResponse
	(*GetConversationsWithScrollAPIRequest)(nil),           // 11: proto.conversation.GetConversationsWithScrollAPIRequest
	(*GetConversationsWithScrollAPIResponse)(nil),          // 12: proto.conversation.GetConversationsWithScrollAPIResponse
	(*PutConversationRequest)(nil),                         // 13: proto.conversation.PutConversationRequest
	(*PutConversationResponse)(nil),                        // 14: proto.conversation.PutConversationResponse
	(*PutConversationStatusRequest)(nil),                   // 15: proto.conversation.PutConversationStatusRequest
	(*PutConversationStatusResponse)(nil),                  // 16: proto.conversation.PutConversationStatusResponse
	(*GetConversationByIdRequest)(nil),                     // 17: proto.conversation.GetConversationByIdRequest
	(*GetConversationByIdResponse)(nil),                    // 18: proto.conversation.GetConversationByIdResponse
	(*PutLabelToConversationRequest)(nil),                  // 19: proto.conversation.PutLabelToConversationRequest
	(*PutLabelToConversationResponse)(nil),                 // 20: proto.conversation.PutLabelToConversationResponse
	(*UpdaterUserPreferenceConversationRequest)(nil),       // 21: proto.conversation.UpdaterUserPreferenceConversationRequest
	(*UpdaterUserPreferenceConversationResponse)(nil),      // 22: proto.conversation.UpdaterUserPreferenceConversationResponse
	(*timestamppb.Timestamp)(nil),                          // 23: google.protobuf.Timestamp
}
var file_proto_conversation_conversation_proto_depIdxs = []int32{
	3,  // 0: proto.conversation.ConversationCustomView.share_info:type_name -> proto.conversation.ShareInfo
	4,  // 1: proto.conversation.ConversationCustomView.label:type_name -> proto.conversation.ChatLabel
	3,  // 2: proto.conversation.ConversationView.share_info:type_name -> proto.conversation.ShareInfo
	4,  // 3: proto.conversation.ConversationView.label:type_name -> proto.conversation.ChatLabel
	3,  // 4: proto.conversation.Conversation.share_info:type_name -> proto.conversation.ShareInfo
	4,  // 5: proto.conversation.Conversation.label:type_name -> proto.conversation.ChatLabel
	23, // 6: proto.conversation.Conversation.is_done_at:type_name -> google.protobuf.Timestamp
	23, // 7: proto.conversation.ChatLabel.created_at:type_name -> google.protobuf.Timestamp
	23, // 8: proto.conversation.ChatLabel.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 9: proto.conversation.GetConversationsResponse.data:type_name -> proto.conversation.ConversationCustomView
	1,  // 10: proto.conversation.GetConversationsByManagerResponse.data:type_name -> proto.conversation.ConversationView
	1,  // 11: proto.conversation.GetConversationsByManagerWithScrollAPIResponse.data:type_name -> proto.conversation.ConversationView
	0,  // 12: proto.conversation.GetConversationsWithScrollAPIResponse.data:type_name -> proto.conversation.ConversationCustomView
	2,  // 13: proto.conversation.GetConversationByIdResponse.data:type_name -> proto.conversation.Conversation
	5,  // 14: proto.conversation.ConversationService.GetConversations:input_type -> proto.conversation.GetConversationsRequest
	11, // 15: proto.conversation.ConversationService.GetConversationsWithScrollAPI:input_type -> proto.conversation.GetConversationsWithScrollAPIRequest
	7,  // 16: proto.conversation.ConversationService.GetConversationsByManager:input_type -> proto.conversation.GetConversationsByManagerRequest
	9,  // 17: proto.conversation.ConversationService.GetConversationsByManagerWithScrollAPI:input_type -> proto.conversation.GetConversationsByManagerWithScrollAPIRequest
	13, // 18: proto.conversation.ConversationService.UpdateConversation:input_type -> proto.conversation.PutConversationRequest
	15, // 19: proto.conversation.ConversationService.UpdateStatusConversation:input_type -> proto.conversation.PutConversationStatusRequest
	17, // 20: proto.conversation.ConversationService.GetConversationById:input_type -> proto.conversation.GetConversationByIdRequest
	19, // 21: proto.conversation.ConversationService.PutLabelToConversation:input_type -> proto.conversation.PutLabelToConversationRequest
	21, // 22: proto.conversation.ConversationService.UpdaterUserPreferenceConversation:input_type -> proto.conversation.UpdaterUserPreferenceConversationRequest
	6,  // 23: proto.conversation.ConversationService.GetConversations:output_type -> proto.conversation.GetConversationsResponse
	12, // 24: proto.conversation.ConversationService.GetConversationsWithScrollAPI:output_type -> proto.conversation.GetConversationsWithScrollAPIResponse
	8,  // 25: proto.conversation.ConversationService.GetConversationsByManager:output_type -> proto.conversation.GetConversationsByManagerResponse
	10, // 26: proto.conversation.ConversationService.GetConversationsByManagerWithScrollAPI:output_type -> proto.conversation.GetConversationsByManagerWithScrollAPIResponse
	14, // 27: proto.conversation.ConversationService.UpdateConversation:output_type -> proto.conversation.PutConversationResponse
	16, // 28: proto.conversation.ConversationService.UpdateStatusConversation:output_type -> proto.conversation.PutConversationStatusResponse
	18, // 29: proto.conversation.ConversationService.GetConversationById:output_type -> proto.conversation.GetConversationByIdResponse
	20, // 30: proto.conversation.ConversationService.PutLabelToConversation:output_type -> proto.conversation.PutLabelToConversationResponse
	22, // 31: proto.conversation.ConversationService.UpdaterUserPreferenceConversation:output_type -> proto.conversation.UpdaterUserPreferenceConversationResponse
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_conversation_conversation_proto_init() }
func file_proto_conversation_conversation_proto_init() {
	if File_proto_conversation_conversation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_conversation_conversation_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationCustomView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ChatLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsByManagerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsByManagerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsByManagerWithScrollAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsByManagerWithScrollAPIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsWithScrollAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationsWithScrollAPIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PutConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PutConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PutConversationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PutConversationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetConversationByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PutLabelToConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PutLabelToConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdaterUserPreferenceConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conversation_conversation_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdaterUserPreferenceConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_conversation_conversation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_conversation_conversation_proto_goTypes,
		DependencyIndexes: file_proto_conversation_conversation_proto_depIdxs,
		MessageInfos:      file_proto_conversation_conversation_proto_msgTypes,
	}.Build()
	File_proto_conversation_conversation_proto = out.File
	file_proto_conversation_conversation_proto_rawDesc = nil
	file_proto_conversation_conversation_proto_goTypes = nil
	file_proto_conversation_conversation_proto_depIdxs = nil
}
