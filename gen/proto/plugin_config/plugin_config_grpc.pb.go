// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/plugin_config/plugin_config.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginConfig_PostPluginConfig_FullMethodName = "/proto.plugin_config.plugin_config.PluginConfig/PostPluginConfig"
	PluginConfig_GetPluginConfigs_FullMethodName = "/proto.plugin_config.plugin_config.PluginConfig/GetPluginConfigs"
)

// PluginConfigClient is the client API for PluginConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginConfigClient interface {
	PostPluginConfig(ctx context.Context, in *PluginConfigBodyRequest, opts ...grpc.CallOption) (*PluginConfigResponse, error)
	GetPluginConfigs(ctx context.Context, in *PluginConfigRequest, opts ...grpc.CallOption) (*PluginConfigResponse, error)
}

type pluginConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginConfigClient(cc grpc.ClientConnInterface) PluginConfigClient {
	return &pluginConfigClient{cc}
}

func (c *pluginConfigClient) PostPluginConfig(ctx context.Context, in *PluginConfigBodyRequest, opts ...grpc.CallOption) (*PluginConfigResponse, error) {
	out := new(PluginConfigResponse)
	err := c.cc.Invoke(ctx, PluginConfig_PostPluginConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginConfigClient) GetPluginConfigs(ctx context.Context, in *PluginConfigRequest, opts ...grpc.CallOption) (*PluginConfigResponse, error) {
	out := new(PluginConfigResponse)
	err := c.cc.Invoke(ctx, PluginConfig_GetPluginConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginConfigServer is the server API for PluginConfig service.
// All implementations should embed UnimplementedPluginConfigServer
// for forward compatibility
type PluginConfigServer interface {
	PostPluginConfig(context.Context, *PluginConfigBodyRequest) (*PluginConfigResponse, error)
	GetPluginConfigs(context.Context, *PluginConfigRequest) (*PluginConfigResponse, error)
}

// UnimplementedPluginConfigServer should be embedded to have forward compatible implementations.
type UnimplementedPluginConfigServer struct {
}

func (UnimplementedPluginConfigServer) PostPluginConfig(context.Context, *PluginConfigBodyRequest) (*PluginConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPluginConfig not implemented")
}
func (UnimplementedPluginConfigServer) GetPluginConfigs(context.Context, *PluginConfigRequest) (*PluginConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginConfigs not implemented")
}

// UnsafePluginConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginConfigServer will
// result in compilation errors.
type UnsafePluginConfigServer interface {
	mustEmbedUnimplementedPluginConfigServer()
}

func RegisterPluginConfigServer(s grpc.ServiceRegistrar, srv PluginConfigServer) {
	s.RegisterService(&PluginConfig_ServiceDesc, srv)
}

func _PluginConfig_PostPluginConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginConfigBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginConfigServer).PostPluginConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginConfig_PostPluginConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginConfigServer).PostPluginConfig(ctx, req.(*PluginConfigBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginConfig_GetPluginConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginConfigServer).GetPluginConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginConfig_GetPluginConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginConfigServer).GetPluginConfigs(ctx, req.(*PluginConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginConfig_ServiceDesc is the grpc.ServiceDesc for PluginConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.plugin_config.plugin_config.PluginConfig",
	HandlerType: (*PluginConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostPluginConfig",
			Handler:    _PluginConfig_PostPluginConfig_Handler,
		},
		{
			MethodName: "GetPluginConfigs",
			Handler:    _PluginConfig_GetPluginConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plugin_config/plugin_config.proto",
}
