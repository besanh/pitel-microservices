// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/chat_script/chat_script.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatScriptService_GetChatScripts_FullMethodName             = "/proto.chatScript.ChatScriptService/GetChatScripts"
	ChatScriptService_GetChatScriptById_FullMethodName          = "/proto.chatScript.ChatScriptService/GetChatScriptById"
	ChatScriptService_InsertChatScript_FullMethodName           = "/proto.chatScript.ChatScriptService/InsertChatScript"
	ChatScriptService_UpdateChatScriptById_FullMethodName       = "/proto.chatScript.ChatScriptService/UpdateChatScriptById"
	ChatScriptService_UpdateChatScriptStatusById_FullMethodName = "/proto.chatScript.ChatScriptService/UpdateChatScriptStatusById"
	ChatScriptService_DeleteChatScriptById_FullMethodName       = "/proto.chatScript.ChatScriptService/DeleteChatScriptById"
)

// ChatScriptServiceClient is the client API for ChatScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatScriptServiceClient interface {
	GetChatScripts(ctx context.Context, in *GetChatScriptsRequest, opts ...grpc.CallOption) (*GetChatScriptsResponse, error)
	GetChatScriptById(ctx context.Context, in *GetScriptByIdRequest, opts ...grpc.CallOption) (*GetScriptByIdResponse, error)
	InsertChatScript(ctx context.Context, in *PostChatScriptRequest, opts ...grpc.CallOption) (*PostChatScriptResponse, error)
	UpdateChatScriptById(ctx context.Context, in *PutChatScriptRequest, opts ...grpc.CallOption) (*PutChatScriptResponse, error)
	UpdateChatScriptStatusById(ctx context.Context, in *PutChatScriptStatusRequest, opts ...grpc.CallOption) (*PutChatScriptResponse, error)
	DeleteChatScriptById(ctx context.Context, in *DeleteChatScriptRequest, opts ...grpc.CallOption) (*DeleteChatScriptResponse, error)
}

type chatScriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatScriptServiceClient(cc grpc.ClientConnInterface) ChatScriptServiceClient {
	return &chatScriptServiceClient{cc}
}

func (c *chatScriptServiceClient) GetChatScripts(ctx context.Context, in *GetChatScriptsRequest, opts ...grpc.CallOption) (*GetChatScriptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatScriptsResponse)
	err := c.cc.Invoke(ctx, ChatScriptService_GetChatScripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatScriptServiceClient) GetChatScriptById(ctx context.Context, in *GetScriptByIdRequest, opts ...grpc.CallOption) (*GetScriptByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScriptByIdResponse)
	err := c.cc.Invoke(ctx, ChatScriptService_GetChatScriptById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatScriptServiceClient) InsertChatScript(ctx context.Context, in *PostChatScriptRequest, opts ...grpc.CallOption) (*PostChatScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostChatScriptResponse)
	err := c.cc.Invoke(ctx, ChatScriptService_InsertChatScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatScriptServiceClient) UpdateChatScriptById(ctx context.Context, in *PutChatScriptRequest, opts ...grpc.CallOption) (*PutChatScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChatScriptResponse)
	err := c.cc.Invoke(ctx, ChatScriptService_UpdateChatScriptById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatScriptServiceClient) UpdateChatScriptStatusById(ctx context.Context, in *PutChatScriptStatusRequest, opts ...grpc.CallOption) (*PutChatScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChatScriptResponse)
	err := c.cc.Invoke(ctx, ChatScriptService_UpdateChatScriptStatusById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatScriptServiceClient) DeleteChatScriptById(ctx context.Context, in *DeleteChatScriptRequest, opts ...grpc.CallOption) (*DeleteChatScriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatScriptResponse)
	err := c.cc.Invoke(ctx, ChatScriptService_DeleteChatScriptById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatScriptServiceServer is the server API for ChatScriptService service.
// All implementations should embed UnimplementedChatScriptServiceServer
// for forward compatibility
type ChatScriptServiceServer interface {
	GetChatScripts(context.Context, *GetChatScriptsRequest) (*GetChatScriptsResponse, error)
	GetChatScriptById(context.Context, *GetScriptByIdRequest) (*GetScriptByIdResponse, error)
	InsertChatScript(context.Context, *PostChatScriptRequest) (*PostChatScriptResponse, error)
	UpdateChatScriptById(context.Context, *PutChatScriptRequest) (*PutChatScriptResponse, error)
	UpdateChatScriptStatusById(context.Context, *PutChatScriptStatusRequest) (*PutChatScriptResponse, error)
	DeleteChatScriptById(context.Context, *DeleteChatScriptRequest) (*DeleteChatScriptResponse, error)
}

// UnimplementedChatScriptServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatScriptServiceServer struct {
}

func (UnimplementedChatScriptServiceServer) GetChatScripts(context.Context, *GetChatScriptsRequest) (*GetChatScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatScripts not implemented")
}
func (UnimplementedChatScriptServiceServer) GetChatScriptById(context.Context, *GetScriptByIdRequest) (*GetScriptByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatScriptById not implemented")
}
func (UnimplementedChatScriptServiceServer) InsertChatScript(context.Context, *PostChatScriptRequest) (*PostChatScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatScript not implemented")
}
func (UnimplementedChatScriptServiceServer) UpdateChatScriptById(context.Context, *PutChatScriptRequest) (*PutChatScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatScriptById not implemented")
}
func (UnimplementedChatScriptServiceServer) UpdateChatScriptStatusById(context.Context, *PutChatScriptStatusRequest) (*PutChatScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatScriptStatusById not implemented")
}
func (UnimplementedChatScriptServiceServer) DeleteChatScriptById(context.Context, *DeleteChatScriptRequest) (*DeleteChatScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatScriptById not implemented")
}

// UnsafeChatScriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatScriptServiceServer will
// result in compilation errors.
type UnsafeChatScriptServiceServer interface {
	mustEmbedUnimplementedChatScriptServiceServer()
}

func RegisterChatScriptServiceServer(s grpc.ServiceRegistrar, srv ChatScriptServiceServer) {
	s.RegisterService(&ChatScriptService_ServiceDesc, srv)
}

func _ChatScriptService_GetChatScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatScriptServiceServer).GetChatScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatScriptService_GetChatScripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatScriptServiceServer).GetChatScripts(ctx, req.(*GetChatScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatScriptService_GetChatScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatScriptServiceServer).GetChatScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatScriptService_GetChatScriptById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatScriptServiceServer).GetChatScriptById(ctx, req.(*GetScriptByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatScriptService_InsertChatScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatScriptServiceServer).InsertChatScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatScriptService_InsertChatScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatScriptServiceServer).InsertChatScript(ctx, req.(*PostChatScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatScriptService_UpdateChatScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatScriptServiceServer).UpdateChatScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatScriptService_UpdateChatScriptById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatScriptServiceServer).UpdateChatScriptById(ctx, req.(*PutChatScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatScriptService_UpdateChatScriptStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatScriptStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatScriptServiceServer).UpdateChatScriptStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatScriptService_UpdateChatScriptStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatScriptServiceServer).UpdateChatScriptStatusById(ctx, req.(*PutChatScriptStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatScriptService_DeleteChatScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatScriptServiceServer).DeleteChatScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatScriptService_DeleteChatScriptById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatScriptServiceServer).DeleteChatScriptById(ctx, req.(*DeleteChatScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatScriptService_ServiceDesc is the grpc.ServiceDesc for ChatScriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatScriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatScript.ChatScriptService",
	HandlerType: (*ChatScriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatScripts",
			Handler:    _ChatScriptService_GetChatScripts_Handler,
		},
		{
			MethodName: "GetChatScriptById",
			Handler:    _ChatScriptService_GetChatScriptById_Handler,
		},
		{
			MethodName: "InsertChatScript",
			Handler:    _ChatScriptService_InsertChatScript_Handler,
		},
		{
			MethodName: "UpdateChatScriptById",
			Handler:    _ChatScriptService_UpdateChatScriptById_Handler,
		},
		{
			MethodName: "UpdateChatScriptStatusById",
			Handler:    _ChatScriptService_UpdateChatScriptStatusById_Handler,
		},
		{
			MethodName: "DeleteChatScriptById",
			Handler:    _ChatScriptService_DeleteChatScriptById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_script/chat_script.proto",
}
