// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/auth_source/auth_source.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthSourceService_PostAuthSource_FullMethodName = "/proto.auth_source.AuthSourceService/PostAuthSource"
)

// AuthSourceServiceClient is the client API for AuthSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSourceServiceClient interface {
	PostAuthSource(ctx context.Context, in *AuthSourceBodyRequest, opts ...grpc.CallOption) (*AuthSourceResponse, error)
}

type authSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSourceServiceClient(cc grpc.ClientConnInterface) AuthSourceServiceClient {
	return &authSourceServiceClient{cc}
}

func (c *authSourceServiceClient) PostAuthSource(ctx context.Context, in *AuthSourceBodyRequest, opts ...grpc.CallOption) (*AuthSourceResponse, error) {
	out := new(AuthSourceResponse)
	err := c.cc.Invoke(ctx, AuthSourceService_PostAuthSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSourceServiceServer is the server API for AuthSourceService service.
// All implementations should embed UnimplementedAuthSourceServiceServer
// for forward compatibility
type AuthSourceServiceServer interface {
	PostAuthSource(context.Context, *AuthSourceBodyRequest) (*AuthSourceResponse, error)
}

// UnimplementedAuthSourceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthSourceServiceServer struct {
}

func (UnimplementedAuthSourceServiceServer) PostAuthSource(context.Context, *AuthSourceBodyRequest) (*AuthSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAuthSource not implemented")
}

// UnsafeAuthSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSourceServiceServer will
// result in compilation errors.
type UnsafeAuthSourceServiceServer interface {
	mustEmbedUnimplementedAuthSourceServiceServer()
}

func RegisterAuthSourceServiceServer(s grpc.ServiceRegistrar, srv AuthSourceServiceServer) {
	s.RegisterService(&AuthSourceService_ServiceDesc, srv)
}

func _AuthSourceService_PostAuthSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSourceServiceServer).PostAuthSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthSourceService_PostAuthSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSourceServiceServer).PostAuthSource(ctx, req.(*AuthSourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSourceService_ServiceDesc is the grpc.ServiceDesc for AuthSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.auth_source.AuthSourceService",
	HandlerType: (*AuthSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAuthSource",
			Handler:    _AuthSourceService_PostAuthSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth_source/auth_source.proto",
}
