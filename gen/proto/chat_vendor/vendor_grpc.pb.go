// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/chat_vendor/vendor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatVendorService_PostChatVendor_FullMethodName = "/proto.chatVendor.ChatVendorService/PostChatVendor"
)

// ChatVendorServiceClient is the client API for ChatVendorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatVendorServiceClient interface {
	PostChatVendor(ctx context.Context, in *PostChatVendorRequest, opts ...grpc.CallOption) (*PostChatVendorResponse, error)
}

type chatVendorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatVendorServiceClient(cc grpc.ClientConnInterface) ChatVendorServiceClient {
	return &chatVendorServiceClient{cc}
}

func (c *chatVendorServiceClient) PostChatVendor(ctx context.Context, in *PostChatVendorRequest, opts ...grpc.CallOption) (*PostChatVendorResponse, error) {
	out := new(PostChatVendorResponse)
	err := c.cc.Invoke(ctx, ChatVendorService_PostChatVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatVendorServiceServer is the server API for ChatVendorService service.
// All implementations should embed UnimplementedChatVendorServiceServer
// for forward compatibility
type ChatVendorServiceServer interface {
	PostChatVendor(context.Context, *PostChatVendorRequest) (*PostChatVendorResponse, error)
}

// UnimplementedChatVendorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatVendorServiceServer struct {
}

func (UnimplementedChatVendorServiceServer) PostChatVendor(context.Context, *PostChatVendorRequest) (*PostChatVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChatVendor not implemented")
}

// UnsafeChatVendorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatVendorServiceServer will
// result in compilation errors.
type UnsafeChatVendorServiceServer interface {
	mustEmbedUnimplementedChatVendorServiceServer()
}

func RegisterChatVendorServiceServer(s grpc.ServiceRegistrar, srv ChatVendorServiceServer) {
	s.RegisterService(&ChatVendorService_ServiceDesc, srv)
}

func _ChatVendorService_PostChatVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatVendorServiceServer).PostChatVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatVendorService_PostChatVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatVendorServiceServer).PostChatVendor(ctx, req.(*PostChatVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatVendorService_ServiceDesc is the grpc.ServiceDesc for ChatVendorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatVendorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatVendor.ChatVendorService",
	HandlerType: (*ChatVendorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostChatVendor",
			Handler:    _ChatVendorService_PostChatVendor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_vendor/vendor.proto",
}
