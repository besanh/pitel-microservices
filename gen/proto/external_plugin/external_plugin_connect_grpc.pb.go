// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/external_plugin/external_plugin_connect.proto

package inbox_marketing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalPluginConnectService_PostCreateConnect_FullMethodName = "/proto.external_plugin.ExternalPluginConnectService/PostCreateConnect"
)

// ExternalPluginConnectServiceClient is the client API for ExternalPluginConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalPluginConnectServiceClient interface {
	PostCreateConnect(ctx context.Context, in *ExternalPluginConnectBodyRequest, opts ...grpc.CallOption) (*ExternalPluginConnectResponse, error)
}

type externalPluginConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalPluginConnectServiceClient(cc grpc.ClientConnInterface) ExternalPluginConnectServiceClient {
	return &externalPluginConnectServiceClient{cc}
}

func (c *externalPluginConnectServiceClient) PostCreateConnect(ctx context.Context, in *ExternalPluginConnectBodyRequest, opts ...grpc.CallOption) (*ExternalPluginConnectResponse, error) {
	out := new(ExternalPluginConnectResponse)
	err := c.cc.Invoke(ctx, ExternalPluginConnectService_PostCreateConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalPluginConnectServiceServer is the server API for ExternalPluginConnectService service.
// All implementations should embed UnimplementedExternalPluginConnectServiceServer
// for forward compatibility
type ExternalPluginConnectServiceServer interface {
	PostCreateConnect(context.Context, *ExternalPluginConnectBodyRequest) (*ExternalPluginConnectResponse, error)
}

// UnimplementedExternalPluginConnectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExternalPluginConnectServiceServer struct {
}

func (UnimplementedExternalPluginConnectServiceServer) PostCreateConnect(context.Context, *ExternalPluginConnectBodyRequest) (*ExternalPluginConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCreateConnect not implemented")
}

// UnsafeExternalPluginConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalPluginConnectServiceServer will
// result in compilation errors.
type UnsafeExternalPluginConnectServiceServer interface {
	mustEmbedUnimplementedExternalPluginConnectServiceServer()
}

func RegisterExternalPluginConnectServiceServer(s grpc.ServiceRegistrar, srv ExternalPluginConnectServiceServer) {
	s.RegisterService(&ExternalPluginConnectService_ServiceDesc, srv)
}

func _ExternalPluginConnectService_PostCreateConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalPluginConnectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalPluginConnectServiceServer).PostCreateConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalPluginConnectService_PostCreateConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalPluginConnectServiceServer).PostCreateConnect(ctx, req.(*ExternalPluginConnectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalPluginConnectService_ServiceDesc is the grpc.ServiceDesc for ExternalPluginConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalPluginConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.external_plugin.ExternalPluginConnectService",
	HandlerType: (*ExternalPluginConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCreateConnect",
			Handler:    _ExternalPluginConnectService_PostCreateConnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/external_plugin/external_plugin_connect.proto",
}
