// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/balance_config/balance_config.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BalanceConfig_PostBalanceConfig_FullMethodName       = "/proto.balance_config.BalanceConfig/PostBalanceConfig"
	BalanceConfig_GetBalanceConfigs_FullMethodName       = "/proto.balance_config.BalanceConfig/GetBalanceConfigs"
	BalanceConfig_GetBalanceConfigById_FullMethodName    = "/proto.balance_config.BalanceConfig/GetBalanceConfigById"
	BalanceConfig_PutBalanceConfigById_FullMethodName    = "/proto.balance_config.BalanceConfig/PutBalanceConfigById"
	BalanceConfig_DeleteBalanceConfigById_FullMethodName = "/proto.balance_config.BalanceConfig/DeleteBalanceConfigById"
)

// BalanceConfigClient is the client API for BalanceConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceConfigClient interface {
	PostBalanceConfig(ctx context.Context, in *BalanceConfigBodyRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error)
	GetBalanceConfigs(ctx context.Context, in *BalanceConfigRequest, opts ...grpc.CallOption) (*BalanceConfigResponse, error)
	GetBalanceConfigById(ctx context.Context, in *BalanceConfigByIdRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error)
	PutBalanceConfigById(ctx context.Context, in *BalanceConfigPutRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error)
	DeleteBalanceConfigById(ctx context.Context, in *BalanceConfigByIdRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error)
}

type balanceConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceConfigClient(cc grpc.ClientConnInterface) BalanceConfigClient {
	return &balanceConfigClient{cc}
}

func (c *balanceConfigClient) PostBalanceConfig(ctx context.Context, in *BalanceConfigBodyRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error) {
	out := new(BalanceConfigByIdResponse)
	err := c.cc.Invoke(ctx, BalanceConfig_PostBalanceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceConfigClient) GetBalanceConfigs(ctx context.Context, in *BalanceConfigRequest, opts ...grpc.CallOption) (*BalanceConfigResponse, error) {
	out := new(BalanceConfigResponse)
	err := c.cc.Invoke(ctx, BalanceConfig_GetBalanceConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceConfigClient) GetBalanceConfigById(ctx context.Context, in *BalanceConfigByIdRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error) {
	out := new(BalanceConfigByIdResponse)
	err := c.cc.Invoke(ctx, BalanceConfig_GetBalanceConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceConfigClient) PutBalanceConfigById(ctx context.Context, in *BalanceConfigPutRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error) {
	out := new(BalanceConfigByIdResponse)
	err := c.cc.Invoke(ctx, BalanceConfig_PutBalanceConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceConfigClient) DeleteBalanceConfigById(ctx context.Context, in *BalanceConfigByIdRequest, opts ...grpc.CallOption) (*BalanceConfigByIdResponse, error) {
	out := new(BalanceConfigByIdResponse)
	err := c.cc.Invoke(ctx, BalanceConfig_DeleteBalanceConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceConfigServer is the server API for BalanceConfig service.
// All implementations should embed UnimplementedBalanceConfigServer
// for forward compatibility
type BalanceConfigServer interface {
	PostBalanceConfig(context.Context, *BalanceConfigBodyRequest) (*BalanceConfigByIdResponse, error)
	GetBalanceConfigs(context.Context, *BalanceConfigRequest) (*BalanceConfigResponse, error)
	GetBalanceConfigById(context.Context, *BalanceConfigByIdRequest) (*BalanceConfigByIdResponse, error)
	PutBalanceConfigById(context.Context, *BalanceConfigPutRequest) (*BalanceConfigByIdResponse, error)
	DeleteBalanceConfigById(context.Context, *BalanceConfigByIdRequest) (*BalanceConfigByIdResponse, error)
}

// UnimplementedBalanceConfigServer should be embedded to have forward compatible implementations.
type UnimplementedBalanceConfigServer struct {
}

func (UnimplementedBalanceConfigServer) PostBalanceConfig(context.Context, *BalanceConfigBodyRequest) (*BalanceConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBalanceConfig not implemented")
}
func (UnimplementedBalanceConfigServer) GetBalanceConfigs(context.Context, *BalanceConfigRequest) (*BalanceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceConfigs not implemented")
}
func (UnimplementedBalanceConfigServer) GetBalanceConfigById(context.Context, *BalanceConfigByIdRequest) (*BalanceConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceConfigById not implemented")
}
func (UnimplementedBalanceConfigServer) PutBalanceConfigById(context.Context, *BalanceConfigPutRequest) (*BalanceConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBalanceConfigById not implemented")
}
func (UnimplementedBalanceConfigServer) DeleteBalanceConfigById(context.Context, *BalanceConfigByIdRequest) (*BalanceConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBalanceConfigById not implemented")
}

// UnsafeBalanceConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceConfigServer will
// result in compilation errors.
type UnsafeBalanceConfigServer interface {
	mustEmbedUnimplementedBalanceConfigServer()
}

func RegisterBalanceConfigServer(s grpc.ServiceRegistrar, srv BalanceConfigServer) {
	s.RegisterService(&BalanceConfig_ServiceDesc, srv)
}

func _BalanceConfig_PostBalanceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceConfigBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceConfigServer).PostBalanceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceConfig_PostBalanceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceConfigServer).PostBalanceConfig(ctx, req.(*BalanceConfigBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceConfig_GetBalanceConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceConfigServer).GetBalanceConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceConfig_GetBalanceConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceConfigServer).GetBalanceConfigs(ctx, req.(*BalanceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceConfig_GetBalanceConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceConfigServer).GetBalanceConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceConfig_GetBalanceConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceConfigServer).GetBalanceConfigById(ctx, req.(*BalanceConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceConfig_PutBalanceConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceConfigPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceConfigServer).PutBalanceConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceConfig_PutBalanceConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceConfigServer).PutBalanceConfigById(ctx, req.(*BalanceConfigPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceConfig_DeleteBalanceConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceConfigServer).DeleteBalanceConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalanceConfig_DeleteBalanceConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceConfigServer).DeleteBalanceConfigById(ctx, req.(*BalanceConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BalanceConfig_ServiceDesc is the grpc.ServiceDesc for BalanceConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.balance_config.BalanceConfig",
	HandlerType: (*BalanceConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostBalanceConfig",
			Handler:    _BalanceConfig_PostBalanceConfig_Handler,
		},
		{
			MethodName: "GetBalanceConfigs",
			Handler:    _BalanceConfig_GetBalanceConfigs_Handler,
		},
		{
			MethodName: "GetBalanceConfigById",
			Handler:    _BalanceConfig_GetBalanceConfigById_Handler,
		},
		{
			MethodName: "PutBalanceConfigById",
			Handler:    _BalanceConfig_PutBalanceConfigById_Handler,
		},
		{
			MethodName: "DeleteBalanceConfigById",
			Handler:    _BalanceConfig_DeleteBalanceConfigById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/balance_config/balance_config.proto",
}
