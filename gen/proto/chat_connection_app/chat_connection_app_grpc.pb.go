// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/chat_connection_app/chat_connection_app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatConnectionAppService_GetChatConnectionApps_FullMethodName       = "/proto.chatConnectionApp.ChatConnectionAppService/GetChatConnectionApps"
	ChatConnectionAppService_GetChatConnectionAppById_FullMethodName    = "/proto.chatConnectionApp.ChatConnectionAppService/GetChatConnectionAppById"
	ChatConnectionAppService_InsertChatConnectionApp_FullMethodName     = "/proto.chatConnectionApp.ChatConnectionAppService/InsertChatConnectionApp"
	ChatConnectionAppService_UpdateChatConnectionAppById_FullMethodName = "/proto.chatConnectionApp.ChatConnectionAppService/UpdateChatConnectionAppById"
	ChatConnectionAppService_DeleteChatConnectionAppById_FullMethodName = "/proto.chatConnectionApp.ChatConnectionAppService/DeleteChatConnectionAppById"
)

// ChatConnectionAppServiceClient is the client API for ChatConnectionAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatConnectionAppServiceClient interface {
	GetChatConnectionApps(ctx context.Context, in *GetChatConnectionAppsRequest, opts ...grpc.CallOption) (*GetChatConnectionAppsResponse, error)
	GetChatConnectionAppById(ctx context.Context, in *GetChatConnectionAppByIdRequest, opts ...grpc.CallOption) (*GetChatConnectionAppByIdResponse, error)
	InsertChatConnectionApp(ctx context.Context, in *PostChatConnectionAppRequest, opts ...grpc.CallOption) (*PostChatConnectionAppResponse, error)
	UpdateChatConnectionAppById(ctx context.Context, in *PutChatConnectionAppRequest, opts ...grpc.CallOption) (*PutChatConnectionAppResponse, error)
	DeleteChatConnectionAppById(ctx context.Context, in *DeleteChatConnectionAppRequest, opts ...grpc.CallOption) (*DeleteChatConnectionAppResponse, error)
}

type chatConnectionAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatConnectionAppServiceClient(cc grpc.ClientConnInterface) ChatConnectionAppServiceClient {
	return &chatConnectionAppServiceClient{cc}
}

func (c *chatConnectionAppServiceClient) GetChatConnectionApps(ctx context.Context, in *GetChatConnectionAppsRequest, opts ...grpc.CallOption) (*GetChatConnectionAppsResponse, error) {
	out := new(GetChatConnectionAppsResponse)
	err := c.cc.Invoke(ctx, ChatConnectionAppService_GetChatConnectionApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatConnectionAppServiceClient) GetChatConnectionAppById(ctx context.Context, in *GetChatConnectionAppByIdRequest, opts ...grpc.CallOption) (*GetChatConnectionAppByIdResponse, error) {
	out := new(GetChatConnectionAppByIdResponse)
	err := c.cc.Invoke(ctx, ChatConnectionAppService_GetChatConnectionAppById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatConnectionAppServiceClient) InsertChatConnectionApp(ctx context.Context, in *PostChatConnectionAppRequest, opts ...grpc.CallOption) (*PostChatConnectionAppResponse, error) {
	out := new(PostChatConnectionAppResponse)
	err := c.cc.Invoke(ctx, ChatConnectionAppService_InsertChatConnectionApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatConnectionAppServiceClient) UpdateChatConnectionAppById(ctx context.Context, in *PutChatConnectionAppRequest, opts ...grpc.CallOption) (*PutChatConnectionAppResponse, error) {
	out := new(PutChatConnectionAppResponse)
	err := c.cc.Invoke(ctx, ChatConnectionAppService_UpdateChatConnectionAppById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatConnectionAppServiceClient) DeleteChatConnectionAppById(ctx context.Context, in *DeleteChatConnectionAppRequest, opts ...grpc.CallOption) (*DeleteChatConnectionAppResponse, error) {
	out := new(DeleteChatConnectionAppResponse)
	err := c.cc.Invoke(ctx, ChatConnectionAppService_DeleteChatConnectionAppById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatConnectionAppServiceServer is the server API for ChatConnectionAppService service.
// All implementations should embed UnimplementedChatConnectionAppServiceServer
// for forward compatibility
type ChatConnectionAppServiceServer interface {
	GetChatConnectionApps(context.Context, *GetChatConnectionAppsRequest) (*GetChatConnectionAppsResponse, error)
	GetChatConnectionAppById(context.Context, *GetChatConnectionAppByIdRequest) (*GetChatConnectionAppByIdResponse, error)
	InsertChatConnectionApp(context.Context, *PostChatConnectionAppRequest) (*PostChatConnectionAppResponse, error)
	UpdateChatConnectionAppById(context.Context, *PutChatConnectionAppRequest) (*PutChatConnectionAppResponse, error)
	DeleteChatConnectionAppById(context.Context, *DeleteChatConnectionAppRequest) (*DeleteChatConnectionAppResponse, error)
}

// UnimplementedChatConnectionAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatConnectionAppServiceServer struct {
}

func (UnimplementedChatConnectionAppServiceServer) GetChatConnectionApps(context.Context, *GetChatConnectionAppsRequest) (*GetChatConnectionAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatConnectionApps not implemented")
}
func (UnimplementedChatConnectionAppServiceServer) GetChatConnectionAppById(context.Context, *GetChatConnectionAppByIdRequest) (*GetChatConnectionAppByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatConnectionAppById not implemented")
}
func (UnimplementedChatConnectionAppServiceServer) InsertChatConnectionApp(context.Context, *PostChatConnectionAppRequest) (*PostChatConnectionAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatConnectionApp not implemented")
}
func (UnimplementedChatConnectionAppServiceServer) UpdateChatConnectionAppById(context.Context, *PutChatConnectionAppRequest) (*PutChatConnectionAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatConnectionAppById not implemented")
}
func (UnimplementedChatConnectionAppServiceServer) DeleteChatConnectionAppById(context.Context, *DeleteChatConnectionAppRequest) (*DeleteChatConnectionAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatConnectionAppById not implemented")
}

// UnsafeChatConnectionAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatConnectionAppServiceServer will
// result in compilation errors.
type UnsafeChatConnectionAppServiceServer interface {
	mustEmbedUnimplementedChatConnectionAppServiceServer()
}

func RegisterChatConnectionAppServiceServer(s grpc.ServiceRegistrar, srv ChatConnectionAppServiceServer) {
	s.RegisterService(&ChatConnectionAppService_ServiceDesc, srv)
}

func _ChatConnectionAppService_GetChatConnectionApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatConnectionAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionAppServiceServer).GetChatConnectionApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionAppService_GetChatConnectionApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionAppServiceServer).GetChatConnectionApps(ctx, req.(*GetChatConnectionAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatConnectionAppService_GetChatConnectionAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatConnectionAppByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionAppServiceServer).GetChatConnectionAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionAppService_GetChatConnectionAppById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionAppServiceServer).GetChatConnectionAppById(ctx, req.(*GetChatConnectionAppByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatConnectionAppService_InsertChatConnectionApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatConnectionAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionAppServiceServer).InsertChatConnectionApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionAppService_InsertChatConnectionApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionAppServiceServer).InsertChatConnectionApp(ctx, req.(*PostChatConnectionAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatConnectionAppService_UpdateChatConnectionAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatConnectionAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionAppServiceServer).UpdateChatConnectionAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionAppService_UpdateChatConnectionAppById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionAppServiceServer).UpdateChatConnectionAppById(ctx, req.(*PutChatConnectionAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatConnectionAppService_DeleteChatConnectionAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatConnectionAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatConnectionAppServiceServer).DeleteChatConnectionAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatConnectionAppService_DeleteChatConnectionAppById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatConnectionAppServiceServer).DeleteChatConnectionAppById(ctx, req.(*DeleteChatConnectionAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatConnectionAppService_ServiceDesc is the grpc.ServiceDesc for ChatConnectionAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatConnectionAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatConnectionApp.ChatConnectionAppService",
	HandlerType: (*ChatConnectionAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatConnectionApps",
			Handler:    _ChatConnectionAppService_GetChatConnectionApps_Handler,
		},
		{
			MethodName: "GetChatConnectionAppById",
			Handler:    _ChatConnectionAppService_GetChatConnectionAppById_Handler,
		},
		{
			MethodName: "InsertChatConnectionApp",
			Handler:    _ChatConnectionAppService_InsertChatConnectionApp_Handler,
		},
		{
			MethodName: "UpdateChatConnectionAppById",
			Handler:    _ChatConnectionAppService_UpdateChatConnectionAppById_Handler,
		},
		{
			MethodName: "DeleteChatConnectionAppById",
			Handler:    _ChatConnectionAppService_DeleteChatConnectionAppById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_connection_app/chat_connection_app.proto",
}
