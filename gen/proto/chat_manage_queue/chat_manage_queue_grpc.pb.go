// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/chat_manage_queue/chat_manage_queue.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatManageQueueService_InsertChatManageQueue_FullMethodName     = "/proto.chatManageQueue.ChatManageQueueService/InsertChatManageQueue"
	ChatManageQueueService_UpdateChatManageQueueById_FullMethodName = "/proto.chatManageQueue.ChatManageQueueService/UpdateChatManageQueueById"
	ChatManageQueueService_DeleteChatManageQueueById_FullMethodName = "/proto.chatManageQueue.ChatManageQueueService/DeleteChatManageQueueById"
)

// ChatManageQueueServiceClient is the client API for ChatManageQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatManageQueueServiceClient interface {
	InsertChatManageQueue(ctx context.Context, in *PostChatManageQueueRequest, opts ...grpc.CallOption) (*PostChatManageQueueResponse, error)
	UpdateChatManageQueueById(ctx context.Context, in *PutChatManageQueueRequest, opts ...grpc.CallOption) (*PutChatManageQueueResponse, error)
	DeleteChatManageQueueById(ctx context.Context, in *DeleteChatManageQueueRequest, opts ...grpc.CallOption) (*DeleteChatManageQueueResponse, error)
}

type chatManageQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatManageQueueServiceClient(cc grpc.ClientConnInterface) ChatManageQueueServiceClient {
	return &chatManageQueueServiceClient{cc}
}

func (c *chatManageQueueServiceClient) InsertChatManageQueue(ctx context.Context, in *PostChatManageQueueRequest, opts ...grpc.CallOption) (*PostChatManageQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostChatManageQueueResponse)
	err := c.cc.Invoke(ctx, ChatManageQueueService_InsertChatManageQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManageQueueServiceClient) UpdateChatManageQueueById(ctx context.Context, in *PutChatManageQueueRequest, opts ...grpc.CallOption) (*PutChatManageQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChatManageQueueResponse)
	err := c.cc.Invoke(ctx, ChatManageQueueService_UpdateChatManageQueueById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManageQueueServiceClient) DeleteChatManageQueueById(ctx context.Context, in *DeleteChatManageQueueRequest, opts ...grpc.CallOption) (*DeleteChatManageQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatManageQueueResponse)
	err := c.cc.Invoke(ctx, ChatManageQueueService_DeleteChatManageQueueById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatManageQueueServiceServer is the server API for ChatManageQueueService service.
// All implementations should embed UnimplementedChatManageQueueServiceServer
// for forward compatibility
type ChatManageQueueServiceServer interface {
	InsertChatManageQueue(context.Context, *PostChatManageQueueRequest) (*PostChatManageQueueResponse, error)
	UpdateChatManageQueueById(context.Context, *PutChatManageQueueRequest) (*PutChatManageQueueResponse, error)
	DeleteChatManageQueueById(context.Context, *DeleteChatManageQueueRequest) (*DeleteChatManageQueueResponse, error)
}

// UnimplementedChatManageQueueServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatManageQueueServiceServer struct {
}

func (UnimplementedChatManageQueueServiceServer) InsertChatManageQueue(context.Context, *PostChatManageQueueRequest) (*PostChatManageQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatManageQueue not implemented")
}
func (UnimplementedChatManageQueueServiceServer) UpdateChatManageQueueById(context.Context, *PutChatManageQueueRequest) (*PutChatManageQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatManageQueueById not implemented")
}
func (UnimplementedChatManageQueueServiceServer) DeleteChatManageQueueById(context.Context, *DeleteChatManageQueueRequest) (*DeleteChatManageQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatManageQueueById not implemented")
}

// UnsafeChatManageQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatManageQueueServiceServer will
// result in compilation errors.
type UnsafeChatManageQueueServiceServer interface {
	mustEmbedUnimplementedChatManageQueueServiceServer()
}

func RegisterChatManageQueueServiceServer(s grpc.ServiceRegistrar, srv ChatManageQueueServiceServer) {
	s.RegisterService(&ChatManageQueueService_ServiceDesc, srv)
}

func _ChatManageQueueService_InsertChatManageQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatManageQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManageQueueServiceServer).InsertChatManageQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManageQueueService_InsertChatManageQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManageQueueServiceServer).InsertChatManageQueue(ctx, req.(*PostChatManageQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManageQueueService_UpdateChatManageQueueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatManageQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManageQueueServiceServer).UpdateChatManageQueueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManageQueueService_UpdateChatManageQueueById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManageQueueServiceServer).UpdateChatManageQueueById(ctx, req.(*PutChatManageQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManageQueueService_DeleteChatManageQueueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatManageQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManageQueueServiceServer).DeleteChatManageQueueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatManageQueueService_DeleteChatManageQueueById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManageQueueServiceServer).DeleteChatManageQueueById(ctx, req.(*DeleteChatManageQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatManageQueueService_ServiceDesc is the grpc.ServiceDesc for ChatManageQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatManageQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatManageQueue.ChatManageQueueService",
	HandlerType: (*ChatManageQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertChatManageQueue",
			Handler:    _ChatManageQueueService_InsertChatManageQueue_Handler,
		},
		{
			MethodName: "UpdateChatManageQueueById",
			Handler:    _ChatManageQueueService_UpdateChatManageQueueById_Handler,
		},
		{
			MethodName: "DeleteChatManageQueueById",
			Handler:    _ChatManageQueueService_DeleteChatManageQueueById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_manage_queue/chat_manage_queue.proto",
}
