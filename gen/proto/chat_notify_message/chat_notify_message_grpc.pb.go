// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_notify_message/chat_notify_message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifyMessageServiceClient is the client API for NotifyMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyMessageServiceClient interface {
	GetNotifyMessages(ctx context.Context, in *GetNotifyMessagesRequest, opts ...grpc.CallOption) (*GetNotifyMessagesResponse, error)
	GetNotifyMessageById(ctx context.Context, in *GetNotifyMessageByIdRequest, opts ...grpc.CallOption) (*GetNotifyMessageByIdResponse, error)
	InsertNotifyMessage(ctx context.Context, in *PostNotifyMessageRequest, opts ...grpc.CallOption) (*PostNotifyMessageResponse, error)
	UpdateNotifyMessageById(ctx context.Context, in *PutNotifyMessageRequest, opts ...grpc.CallOption) (*PutNotifyMessageResponse, error)
	DeleteNotifyMessageById(ctx context.Context, in *DeleteNotifyMessageRequest, opts ...grpc.CallOption) (*DeleteNotifyMessageResponse, error)
}

type notifyMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyMessageServiceClient(cc grpc.ClientConnInterface) NotifyMessageServiceClient {
	return &notifyMessageServiceClient{cc}
}

func (c *notifyMessageServiceClient) GetNotifyMessages(ctx context.Context, in *GetNotifyMessagesRequest, opts ...grpc.CallOption) (*GetNotifyMessagesResponse, error) {
	out := new(GetNotifyMessagesResponse)
	err := c.cc.Invoke(ctx, "/proto.chatNotifyMessage.NotifyMessageService/GetNotifyMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyMessageServiceClient) GetNotifyMessageById(ctx context.Context, in *GetNotifyMessageByIdRequest, opts ...grpc.CallOption) (*GetNotifyMessageByIdResponse, error) {
	out := new(GetNotifyMessageByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.chatNotifyMessage.NotifyMessageService/GetNotifyMessageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyMessageServiceClient) InsertNotifyMessage(ctx context.Context, in *PostNotifyMessageRequest, opts ...grpc.CallOption) (*PostNotifyMessageResponse, error) {
	out := new(PostNotifyMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.chatNotifyMessage.NotifyMessageService/InsertNotifyMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyMessageServiceClient) UpdateNotifyMessageById(ctx context.Context, in *PutNotifyMessageRequest, opts ...grpc.CallOption) (*PutNotifyMessageResponse, error) {
	out := new(PutNotifyMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.chatNotifyMessage.NotifyMessageService/UpdateNotifyMessageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyMessageServiceClient) DeleteNotifyMessageById(ctx context.Context, in *DeleteNotifyMessageRequest, opts ...grpc.CallOption) (*DeleteNotifyMessageResponse, error) {
	out := new(DeleteNotifyMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.chatNotifyMessage.NotifyMessageService/DeleteNotifyMessageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyMessageServiceServer is the server API for NotifyMessageService service.
// All implementations should embed UnimplementedNotifyMessageServiceServer
// for forward compatibility
type NotifyMessageServiceServer interface {
	GetNotifyMessages(context.Context, *GetNotifyMessagesRequest) (*GetNotifyMessagesResponse, error)
	GetNotifyMessageById(context.Context, *GetNotifyMessageByIdRequest) (*GetNotifyMessageByIdResponse, error)
	InsertNotifyMessage(context.Context, *PostNotifyMessageRequest) (*PostNotifyMessageResponse, error)
	UpdateNotifyMessageById(context.Context, *PutNotifyMessageRequest) (*PutNotifyMessageResponse, error)
	DeleteNotifyMessageById(context.Context, *DeleteNotifyMessageRequest) (*DeleteNotifyMessageResponse, error)
}

// UnimplementedNotifyMessageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotifyMessageServiceServer struct {
}

func (UnimplementedNotifyMessageServiceServer) GetNotifyMessages(context.Context, *GetNotifyMessagesRequest) (*GetNotifyMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyMessages not implemented")
}
func (UnimplementedNotifyMessageServiceServer) GetNotifyMessageById(context.Context, *GetNotifyMessageByIdRequest) (*GetNotifyMessageByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyMessageById not implemented")
}
func (UnimplementedNotifyMessageServiceServer) InsertNotifyMessage(context.Context, *PostNotifyMessageRequest) (*PostNotifyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNotifyMessage not implemented")
}
func (UnimplementedNotifyMessageServiceServer) UpdateNotifyMessageById(context.Context, *PutNotifyMessageRequest) (*PutNotifyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyMessageById not implemented")
}
func (UnimplementedNotifyMessageServiceServer) DeleteNotifyMessageById(context.Context, *DeleteNotifyMessageRequest) (*DeleteNotifyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifyMessageById not implemented")
}

// UnsafeNotifyMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyMessageServiceServer will
// result in compilation errors.
type UnsafeNotifyMessageServiceServer interface {
	mustEmbedUnimplementedNotifyMessageServiceServer()
}

func RegisterNotifyMessageServiceServer(s grpc.ServiceRegistrar, srv NotifyMessageServiceServer) {
	s.RegisterService(&NotifyMessageService_ServiceDesc, srv)
}

func _NotifyMessageService_GetNotifyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifyMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyMessageServiceServer).GetNotifyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatNotifyMessage.NotifyMessageService/GetNotifyMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyMessageServiceServer).GetNotifyMessages(ctx, req.(*GetNotifyMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyMessageService_GetNotifyMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifyMessageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyMessageServiceServer).GetNotifyMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatNotifyMessage.NotifyMessageService/GetNotifyMessageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyMessageServiceServer).GetNotifyMessageById(ctx, req.(*GetNotifyMessageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyMessageService_InsertNotifyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNotifyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyMessageServiceServer).InsertNotifyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatNotifyMessage.NotifyMessageService/InsertNotifyMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyMessageServiceServer).InsertNotifyMessage(ctx, req.(*PostNotifyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyMessageService_UpdateNotifyMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNotifyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyMessageServiceServer).UpdateNotifyMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatNotifyMessage.NotifyMessageService/UpdateNotifyMessageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyMessageServiceServer).UpdateNotifyMessageById(ctx, req.(*PutNotifyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyMessageService_DeleteNotifyMessageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyMessageServiceServer).DeleteNotifyMessageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatNotifyMessage.NotifyMessageService/DeleteNotifyMessageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyMessageServiceServer).DeleteNotifyMessageById(ctx, req.(*DeleteNotifyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyMessageService_ServiceDesc is the grpc.ServiceDesc for NotifyMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatNotifyMessage.NotifyMessageService",
	HandlerType: (*NotifyMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifyMessages",
			Handler:    _NotifyMessageService_GetNotifyMessages_Handler,
		},
		{
			MethodName: "GetNotifyMessageById",
			Handler:    _NotifyMessageService_GetNotifyMessageById_Handler,
		},
		{
			MethodName: "InsertNotifyMessage",
			Handler:    _NotifyMessageService_InsertNotifyMessage_Handler,
		},
		{
			MethodName: "UpdateNotifyMessageById",
			Handler:    _NotifyMessageService_UpdateNotifyMessageById_Handler,
		},
		{
			MethodName: "DeleteNotifyMessageById",
			Handler:    _NotifyMessageService_DeleteNotifyMessageById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_notify_message/chat_notify_message.proto",
}
