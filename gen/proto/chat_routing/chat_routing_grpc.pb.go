// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_routing/chat_routing.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatRoutingServiceClient is the client API for ChatRoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoutingServiceClient interface {
	GetChatRoutings(ctx context.Context, in *GetChatRoutingsRequest, opts ...grpc.CallOption) (*GetChatRoutingsResponse, error)
	GetChatRoutingById(ctx context.Context, in *GetChatRoutingByIdRequest, opts ...grpc.CallOption) (*GetChatRoutingByIdResponse, error)
	InsertChatRouting(ctx context.Context, in *PostChatRoutingRequest, opts ...grpc.CallOption) (*PostChatRoutingResponse, error)
	UpdateChatRoutingById(ctx context.Context, in *PutChatRoutingRequest, opts ...grpc.CallOption) (*PutChatRoutingResponse, error)
	DeleteChatRoutingById(ctx context.Context, in *DeleteChatRoutingRequest, opts ...grpc.CallOption) (*DeleteChatRoutingResponse, error)
}

type chatRoutingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoutingServiceClient(cc grpc.ClientConnInterface) ChatRoutingServiceClient {
	return &chatRoutingServiceClient{cc}
}

func (c *chatRoutingServiceClient) GetChatRoutings(ctx context.Context, in *GetChatRoutingsRequest, opts ...grpc.CallOption) (*GetChatRoutingsResponse, error) {
	out := new(GetChatRoutingsResponse)
	err := c.cc.Invoke(ctx, "/proto.chatRouting.ChatRoutingService/GetChatRoutings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoutingServiceClient) GetChatRoutingById(ctx context.Context, in *GetChatRoutingByIdRequest, opts ...grpc.CallOption) (*GetChatRoutingByIdResponse, error) {
	out := new(GetChatRoutingByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.chatRouting.ChatRoutingService/GetChatRoutingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoutingServiceClient) InsertChatRouting(ctx context.Context, in *PostChatRoutingRequest, opts ...grpc.CallOption) (*PostChatRoutingResponse, error) {
	out := new(PostChatRoutingResponse)
	err := c.cc.Invoke(ctx, "/proto.chatRouting.ChatRoutingService/InsertChatRouting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoutingServiceClient) UpdateChatRoutingById(ctx context.Context, in *PutChatRoutingRequest, opts ...grpc.CallOption) (*PutChatRoutingResponse, error) {
	out := new(PutChatRoutingResponse)
	err := c.cc.Invoke(ctx, "/proto.chatRouting.ChatRoutingService/UpdateChatRoutingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoutingServiceClient) DeleteChatRoutingById(ctx context.Context, in *DeleteChatRoutingRequest, opts ...grpc.CallOption) (*DeleteChatRoutingResponse, error) {
	out := new(DeleteChatRoutingResponse)
	err := c.cc.Invoke(ctx, "/proto.chatRouting.ChatRoutingService/DeleteChatRoutingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoutingServiceServer is the server API for ChatRoutingService service.
// All implementations should embed UnimplementedChatRoutingServiceServer
// for forward compatibility
type ChatRoutingServiceServer interface {
	GetChatRoutings(context.Context, *GetChatRoutingsRequest) (*GetChatRoutingsResponse, error)
	GetChatRoutingById(context.Context, *GetChatRoutingByIdRequest) (*GetChatRoutingByIdResponse, error)
	InsertChatRouting(context.Context, *PostChatRoutingRequest) (*PostChatRoutingResponse, error)
	UpdateChatRoutingById(context.Context, *PutChatRoutingRequest) (*PutChatRoutingResponse, error)
	DeleteChatRoutingById(context.Context, *DeleteChatRoutingRequest) (*DeleteChatRoutingResponse, error)
}

// UnimplementedChatRoutingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatRoutingServiceServer struct {
}

func (UnimplementedChatRoutingServiceServer) GetChatRoutings(context.Context, *GetChatRoutingsRequest) (*GetChatRoutingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoutings not implemented")
}
func (UnimplementedChatRoutingServiceServer) GetChatRoutingById(context.Context, *GetChatRoutingByIdRequest) (*GetChatRoutingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoutingById not implemented")
}
func (UnimplementedChatRoutingServiceServer) InsertChatRouting(context.Context, *PostChatRoutingRequest) (*PostChatRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatRouting not implemented")
}
func (UnimplementedChatRoutingServiceServer) UpdateChatRoutingById(context.Context, *PutChatRoutingRequest) (*PutChatRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatRoutingById not implemented")
}
func (UnimplementedChatRoutingServiceServer) DeleteChatRoutingById(context.Context, *DeleteChatRoutingRequest) (*DeleteChatRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatRoutingById not implemented")
}

// UnsafeChatRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoutingServiceServer will
// result in compilation errors.
type UnsafeChatRoutingServiceServer interface {
	mustEmbedUnimplementedChatRoutingServiceServer()
}

func RegisterChatRoutingServiceServer(s grpc.ServiceRegistrar, srv ChatRoutingServiceServer) {
	s.RegisterService(&ChatRoutingService_ServiceDesc, srv)
}

func _ChatRoutingService_GetChatRoutings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRoutingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoutingServiceServer).GetChatRoutings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatRouting.ChatRoutingService/GetChatRoutings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoutingServiceServer).GetChatRoutings(ctx, req.(*GetChatRoutingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoutingService_GetChatRoutingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRoutingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoutingServiceServer).GetChatRoutingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatRouting.ChatRoutingService/GetChatRoutingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoutingServiceServer).GetChatRoutingById(ctx, req.(*GetChatRoutingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoutingService_InsertChatRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoutingServiceServer).InsertChatRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatRouting.ChatRoutingService/InsertChatRouting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoutingServiceServer).InsertChatRouting(ctx, req.(*PostChatRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoutingService_UpdateChatRoutingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoutingServiceServer).UpdateChatRoutingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatRouting.ChatRoutingService/UpdateChatRoutingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoutingServiceServer).UpdateChatRoutingById(ctx, req.(*PutChatRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoutingService_DeleteChatRoutingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoutingServiceServer).DeleteChatRoutingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatRouting.ChatRoutingService/DeleteChatRoutingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoutingServiceServer).DeleteChatRoutingById(ctx, req.(*DeleteChatRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoutingService_ServiceDesc is the grpc.ServiceDesc for ChatRoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatRouting.ChatRoutingService",
	HandlerType: (*ChatRoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatRoutings",
			Handler:    _ChatRoutingService_GetChatRoutings_Handler,
		},
		{
			MethodName: "GetChatRoutingById",
			Handler:    _ChatRoutingService_GetChatRoutingById_Handler,
		},
		{
			MethodName: "InsertChatRouting",
			Handler:    _ChatRoutingService_InsertChatRouting_Handler,
		},
		{
			MethodName: "UpdateChatRoutingById",
			Handler:    _ChatRoutingService_UpdateChatRoutingById_Handler,
		},
		{
			MethodName: "DeleteChatRoutingById",
			Handler:    _ChatRoutingService_DeleteChatRoutingById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_routing/chat_routing.proto",
}
