// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/chat_routing/chat_routing.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatRouting_PostChatRouting_FullMethodName = "/proto.chat_routing.ChatRouting/PostChatRouting"
)

// ChatRoutingClient is the client API for ChatRouting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoutingClient interface {
	PostChatRouting(ctx context.Context, in *ChatRoutingBodyRequest, opts ...grpc.CallOption) (*ChatRoutingResponse, error)
}

type chatRoutingClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoutingClient(cc grpc.ClientConnInterface) ChatRoutingClient {
	return &chatRoutingClient{cc}
}

func (c *chatRoutingClient) PostChatRouting(ctx context.Context, in *ChatRoutingBodyRequest, opts ...grpc.CallOption) (*ChatRoutingResponse, error) {
	out := new(ChatRoutingResponse)
	err := c.cc.Invoke(ctx, ChatRouting_PostChatRouting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoutingServer is the server API for ChatRouting service.
// All implementations should embed UnimplementedChatRoutingServer
// for forward compatibility
type ChatRoutingServer interface {
	PostChatRouting(context.Context, *ChatRoutingBodyRequest) (*ChatRoutingResponse, error)
}

// UnimplementedChatRoutingServer should be embedded to have forward compatible implementations.
type UnimplementedChatRoutingServer struct {
}

func (UnimplementedChatRoutingServer) PostChatRouting(context.Context, *ChatRoutingBodyRequest) (*ChatRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChatRouting not implemented")
}

// UnsafeChatRoutingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoutingServer will
// result in compilation errors.
type UnsafeChatRoutingServer interface {
	mustEmbedUnimplementedChatRoutingServer()
}

func RegisterChatRoutingServer(s grpc.ServiceRegistrar, srv ChatRoutingServer) {
	s.RegisterService(&ChatRouting_ServiceDesc, srv)
}

func _ChatRouting_PostChatRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRoutingBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoutingServer).PostChatRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRouting_PostChatRouting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoutingServer).PostChatRouting(ctx, req.(*ChatRoutingBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRouting_ServiceDesc is the grpc.ServiceDesc for ChatRouting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRouting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chat_routing.ChatRouting",
	HandlerType: (*ChatRoutingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostChatRouting",
			Handler:    _ChatRouting_PostChatRouting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_routing/chat_routing.proto",
}
