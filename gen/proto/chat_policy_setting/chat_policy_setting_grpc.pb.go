// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_policy_setting/chat_policy_setting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatPolicySettingServiceClient is the client API for ChatPolicySettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatPolicySettingServiceClient interface {
	GetChatPolicySettings(ctx context.Context, in *GetChatPolicySettingsRequest, opts ...grpc.CallOption) (*GetChatPolicySettingsResponse, error)
	GetChatPolicySettingById(ctx context.Context, in *GetChatPolicySettingByIdRequest, opts ...grpc.CallOption) (*GetChatPolicySettingByIdResponse, error)
	InsertChatPolicySetting(ctx context.Context, in *PostChatPolicySettingRequest, opts ...grpc.CallOption) (*PostChatPolicySettingResponse, error)
	UpdateChatPolicySettingById(ctx context.Context, in *PutChatPolicySettingRequest, opts ...grpc.CallOption) (*PutChatPolicySettingResponse, error)
	DeleteChatPolicySettingById(ctx context.Context, in *DeleteChatPolicySettingRequest, opts ...grpc.CallOption) (*DeleteChatPolicySettingResponse, error)
}

type chatPolicySettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatPolicySettingServiceClient(cc grpc.ClientConnInterface) ChatPolicySettingServiceClient {
	return &chatPolicySettingServiceClient{cc}
}

func (c *chatPolicySettingServiceClient) GetChatPolicySettings(ctx context.Context, in *GetChatPolicySettingsRequest, opts ...grpc.CallOption) (*GetChatPolicySettingsResponse, error) {
	out := new(GetChatPolicySettingsResponse)
	err := c.cc.Invoke(ctx, "/proto.chatPolicySetting.ChatPolicySettingService/GetChatPolicySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatPolicySettingServiceClient) GetChatPolicySettingById(ctx context.Context, in *GetChatPolicySettingByIdRequest, opts ...grpc.CallOption) (*GetChatPolicySettingByIdResponse, error) {
	out := new(GetChatPolicySettingByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.chatPolicySetting.ChatPolicySettingService/GetChatPolicySettingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatPolicySettingServiceClient) InsertChatPolicySetting(ctx context.Context, in *PostChatPolicySettingRequest, opts ...grpc.CallOption) (*PostChatPolicySettingResponse, error) {
	out := new(PostChatPolicySettingResponse)
	err := c.cc.Invoke(ctx, "/proto.chatPolicySetting.ChatPolicySettingService/InsertChatPolicySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatPolicySettingServiceClient) UpdateChatPolicySettingById(ctx context.Context, in *PutChatPolicySettingRequest, opts ...grpc.CallOption) (*PutChatPolicySettingResponse, error) {
	out := new(PutChatPolicySettingResponse)
	err := c.cc.Invoke(ctx, "/proto.chatPolicySetting.ChatPolicySettingService/UpdateChatPolicySettingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatPolicySettingServiceClient) DeleteChatPolicySettingById(ctx context.Context, in *DeleteChatPolicySettingRequest, opts ...grpc.CallOption) (*DeleteChatPolicySettingResponse, error) {
	out := new(DeleteChatPolicySettingResponse)
	err := c.cc.Invoke(ctx, "/proto.chatPolicySetting.ChatPolicySettingService/DeleteChatPolicySettingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatPolicySettingServiceServer is the server API for ChatPolicySettingService service.
// All implementations should embed UnimplementedChatPolicySettingServiceServer
// for forward compatibility
type ChatPolicySettingServiceServer interface {
	GetChatPolicySettings(context.Context, *GetChatPolicySettingsRequest) (*GetChatPolicySettingsResponse, error)
	GetChatPolicySettingById(context.Context, *GetChatPolicySettingByIdRequest) (*GetChatPolicySettingByIdResponse, error)
	InsertChatPolicySetting(context.Context, *PostChatPolicySettingRequest) (*PostChatPolicySettingResponse, error)
	UpdateChatPolicySettingById(context.Context, *PutChatPolicySettingRequest) (*PutChatPolicySettingResponse, error)
	DeleteChatPolicySettingById(context.Context, *DeleteChatPolicySettingRequest) (*DeleteChatPolicySettingResponse, error)
}

// UnimplementedChatPolicySettingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatPolicySettingServiceServer struct {
}

func (UnimplementedChatPolicySettingServiceServer) GetChatPolicySettings(context.Context, *GetChatPolicySettingsRequest) (*GetChatPolicySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatPolicySettings not implemented")
}
func (UnimplementedChatPolicySettingServiceServer) GetChatPolicySettingById(context.Context, *GetChatPolicySettingByIdRequest) (*GetChatPolicySettingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatPolicySettingById not implemented")
}
func (UnimplementedChatPolicySettingServiceServer) InsertChatPolicySetting(context.Context, *PostChatPolicySettingRequest) (*PostChatPolicySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatPolicySetting not implemented")
}
func (UnimplementedChatPolicySettingServiceServer) UpdateChatPolicySettingById(context.Context, *PutChatPolicySettingRequest) (*PutChatPolicySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatPolicySettingById not implemented")
}
func (UnimplementedChatPolicySettingServiceServer) DeleteChatPolicySettingById(context.Context, *DeleteChatPolicySettingRequest) (*DeleteChatPolicySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatPolicySettingById not implemented")
}

// UnsafeChatPolicySettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatPolicySettingServiceServer will
// result in compilation errors.
type UnsafeChatPolicySettingServiceServer interface {
	mustEmbedUnimplementedChatPolicySettingServiceServer()
}

func RegisterChatPolicySettingServiceServer(s grpc.ServiceRegistrar, srv ChatPolicySettingServiceServer) {
	s.RegisterService(&ChatPolicySettingService_ServiceDesc, srv)
}

func _ChatPolicySettingService_GetChatPolicySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatPolicySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatPolicySettingServiceServer).GetChatPolicySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatPolicySetting.ChatPolicySettingService/GetChatPolicySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatPolicySettingServiceServer).GetChatPolicySettings(ctx, req.(*GetChatPolicySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatPolicySettingService_GetChatPolicySettingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatPolicySettingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatPolicySettingServiceServer).GetChatPolicySettingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatPolicySetting.ChatPolicySettingService/GetChatPolicySettingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatPolicySettingServiceServer).GetChatPolicySettingById(ctx, req.(*GetChatPolicySettingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatPolicySettingService_InsertChatPolicySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatPolicySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatPolicySettingServiceServer).InsertChatPolicySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatPolicySetting.ChatPolicySettingService/InsertChatPolicySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatPolicySettingServiceServer).InsertChatPolicySetting(ctx, req.(*PostChatPolicySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatPolicySettingService_UpdateChatPolicySettingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatPolicySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatPolicySettingServiceServer).UpdateChatPolicySettingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatPolicySetting.ChatPolicySettingService/UpdateChatPolicySettingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatPolicySettingServiceServer).UpdateChatPolicySettingById(ctx, req.(*PutChatPolicySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatPolicySettingService_DeleteChatPolicySettingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatPolicySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatPolicySettingServiceServer).DeleteChatPolicySettingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatPolicySetting.ChatPolicySettingService/DeleteChatPolicySettingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatPolicySettingServiceServer).DeleteChatPolicySettingById(ctx, req.(*DeleteChatPolicySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatPolicySettingService_ServiceDesc is the grpc.ServiceDesc for ChatPolicySettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatPolicySettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatPolicySetting.ChatPolicySettingService",
	HandlerType: (*ChatPolicySettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatPolicySettings",
			Handler:    _ChatPolicySettingService_GetChatPolicySettings_Handler,
		},
		{
			MethodName: "GetChatPolicySettingById",
			Handler:    _ChatPolicySettingService_GetChatPolicySettingById_Handler,
		},
		{
			MethodName: "InsertChatPolicySetting",
			Handler:    _ChatPolicySettingService_InsertChatPolicySetting_Handler,
		},
		{
			MethodName: "UpdateChatPolicySettingById",
			Handler:    _ChatPolicySettingService_UpdateChatPolicySettingById_Handler,
		},
		{
			MethodName: "DeleteChatPolicySettingById",
			Handler:    _ChatPolicySettingService_DeleteChatPolicySettingById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_policy_setting/chat_policy_setting.proto",
}
