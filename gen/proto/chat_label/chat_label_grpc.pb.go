// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/chat_label/chat_label.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatLabelService_GetChatLabels_FullMethodName       = "/proto.chatLabel.ChatLabelService/GetChatLabels"
	ChatLabelService_GetChatLabelById_FullMethodName    = "/proto.chatLabel.ChatLabelService/GetChatLabelById"
	ChatLabelService_InsertChatLabel_FullMethodName     = "/proto.chatLabel.ChatLabelService/InsertChatLabel"
	ChatLabelService_UpdateChatLabelById_FullMethodName = "/proto.chatLabel.ChatLabelService/UpdateChatLabelById"
	ChatLabelService_DeleteChatLabelById_FullMethodName = "/proto.chatLabel.ChatLabelService/DeleteChatLabelById"
)

// ChatLabelServiceClient is the client API for ChatLabelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatLabelServiceClient interface {
	GetChatLabels(ctx context.Context, in *GetChatLabelsRequest, opts ...grpc.CallOption) (*GetChatLabelsResponse, error)
	GetChatLabelById(ctx context.Context, in *GetChatLabelByIdRequest, opts ...grpc.CallOption) (*GetChatLabelByIdResponse, error)
	InsertChatLabel(ctx context.Context, in *PostChatLabelRequest, opts ...grpc.CallOption) (*PostChatLabelResponse, error)
	UpdateChatLabelById(ctx context.Context, in *PutChatLabelRequest, opts ...grpc.CallOption) (*PutChatLabelResponse, error)
	DeleteChatLabelById(ctx context.Context, in *DeleteChatLabelRequest, opts ...grpc.CallOption) (*DeleteChatLabelResponse, error)
}

type chatLabelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatLabelServiceClient(cc grpc.ClientConnInterface) ChatLabelServiceClient {
	return &chatLabelServiceClient{cc}
}

func (c *chatLabelServiceClient) GetChatLabels(ctx context.Context, in *GetChatLabelsRequest, opts ...grpc.CallOption) (*GetChatLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatLabelsResponse)
	err := c.cc.Invoke(ctx, ChatLabelService_GetChatLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLabelServiceClient) GetChatLabelById(ctx context.Context, in *GetChatLabelByIdRequest, opts ...grpc.CallOption) (*GetChatLabelByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatLabelByIdResponse)
	err := c.cc.Invoke(ctx, ChatLabelService_GetChatLabelById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLabelServiceClient) InsertChatLabel(ctx context.Context, in *PostChatLabelRequest, opts ...grpc.CallOption) (*PostChatLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostChatLabelResponse)
	err := c.cc.Invoke(ctx, ChatLabelService_InsertChatLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLabelServiceClient) UpdateChatLabelById(ctx context.Context, in *PutChatLabelRequest, opts ...grpc.CallOption) (*PutChatLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutChatLabelResponse)
	err := c.cc.Invoke(ctx, ChatLabelService_UpdateChatLabelById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatLabelServiceClient) DeleteChatLabelById(ctx context.Context, in *DeleteChatLabelRequest, opts ...grpc.CallOption) (*DeleteChatLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatLabelResponse)
	err := c.cc.Invoke(ctx, ChatLabelService_DeleteChatLabelById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatLabelServiceServer is the server API for ChatLabelService service.
// All implementations should embed UnimplementedChatLabelServiceServer
// for forward compatibility
type ChatLabelServiceServer interface {
	GetChatLabels(context.Context, *GetChatLabelsRequest) (*GetChatLabelsResponse, error)
	GetChatLabelById(context.Context, *GetChatLabelByIdRequest) (*GetChatLabelByIdResponse, error)
	InsertChatLabel(context.Context, *PostChatLabelRequest) (*PostChatLabelResponse, error)
	UpdateChatLabelById(context.Context, *PutChatLabelRequest) (*PutChatLabelResponse, error)
	DeleteChatLabelById(context.Context, *DeleteChatLabelRequest) (*DeleteChatLabelResponse, error)
}

// UnimplementedChatLabelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatLabelServiceServer struct {
}

func (UnimplementedChatLabelServiceServer) GetChatLabels(context.Context, *GetChatLabelsRequest) (*GetChatLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatLabels not implemented")
}
func (UnimplementedChatLabelServiceServer) GetChatLabelById(context.Context, *GetChatLabelByIdRequest) (*GetChatLabelByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatLabelById not implemented")
}
func (UnimplementedChatLabelServiceServer) InsertChatLabel(context.Context, *PostChatLabelRequest) (*PostChatLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChatLabel not implemented")
}
func (UnimplementedChatLabelServiceServer) UpdateChatLabelById(context.Context, *PutChatLabelRequest) (*PutChatLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatLabelById not implemented")
}
func (UnimplementedChatLabelServiceServer) DeleteChatLabelById(context.Context, *DeleteChatLabelRequest) (*DeleteChatLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatLabelById not implemented")
}

// UnsafeChatLabelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatLabelServiceServer will
// result in compilation errors.
type UnsafeChatLabelServiceServer interface {
	mustEmbedUnimplementedChatLabelServiceServer()
}

func RegisterChatLabelServiceServer(s grpc.ServiceRegistrar, srv ChatLabelServiceServer) {
	s.RegisterService(&ChatLabelService_ServiceDesc, srv)
}

func _ChatLabelService_GetChatLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLabelServiceServer).GetChatLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLabelService_GetChatLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLabelServiceServer).GetChatLabels(ctx, req.(*GetChatLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLabelService_GetChatLabelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatLabelByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLabelServiceServer).GetChatLabelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLabelService_GetChatLabelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLabelServiceServer).GetChatLabelById(ctx, req.(*GetChatLabelByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLabelService_InsertChatLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLabelServiceServer).InsertChatLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLabelService_InsertChatLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLabelServiceServer).InsertChatLabel(ctx, req.(*PostChatLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLabelService_UpdateChatLabelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutChatLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLabelServiceServer).UpdateChatLabelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLabelService_UpdateChatLabelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLabelServiceServer).UpdateChatLabelById(ctx, req.(*PutChatLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatLabelService_DeleteChatLabelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatLabelServiceServer).DeleteChatLabelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatLabelService_DeleteChatLabelById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatLabelServiceServer).DeleteChatLabelById(ctx, req.(*DeleteChatLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatLabelService_ServiceDesc is the grpc.ServiceDesc for ChatLabelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatLabelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatLabel.ChatLabelService",
	HandlerType: (*ChatLabelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatLabels",
			Handler:    _ChatLabelService_GetChatLabels_Handler,
		},
		{
			MethodName: "GetChatLabelById",
			Handler:    _ChatLabelService_GetChatLabelById_Handler,
		},
		{
			MethodName: "InsertChatLabel",
			Handler:    _ChatLabelService_InsertChatLabel_Handler,
		},
		{
			MethodName: "UpdateChatLabelById",
			Handler:    _ChatLabelService_UpdateChatLabelById_Handler,
		},
		{
			MethodName: "DeleteChatLabelById",
			Handler:    _ChatLabelService_DeleteChatLabelById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_label/chat_label.proto",
}
