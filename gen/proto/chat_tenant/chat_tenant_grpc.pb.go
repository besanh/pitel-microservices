// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_tenant/chat_tenant.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatTenantServiceClient is the client API for ChatTenantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatTenantServiceClient interface {
	PostChatTenant(ctx context.Context, in *PostChatTenantRequest, opts ...grpc.CallOption) (*PostChatTenantResponse, error)
}

type chatTenantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatTenantServiceClient(cc grpc.ClientConnInterface) ChatTenantServiceClient {
	return &chatTenantServiceClient{cc}
}

func (c *chatTenantServiceClient) PostChatTenant(ctx context.Context, in *PostChatTenantRequest, opts ...grpc.CallOption) (*PostChatTenantResponse, error) {
	out := new(PostChatTenantResponse)
	err := c.cc.Invoke(ctx, "/proto.chatRole.ChatTenantService/PostChatTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatTenantServiceServer is the server API for ChatTenantService service.
// All implementations should embed UnimplementedChatTenantServiceServer
// for forward compatibility
type ChatTenantServiceServer interface {
	PostChatTenant(context.Context, *PostChatTenantRequest) (*PostChatTenantResponse, error)
}

// UnimplementedChatTenantServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatTenantServiceServer struct {
}

func (UnimplementedChatTenantServiceServer) PostChatTenant(context.Context, *PostChatTenantRequest) (*PostChatTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChatTenant not implemented")
}

// UnsafeChatTenantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatTenantServiceServer will
// result in compilation errors.
type UnsafeChatTenantServiceServer interface {
	mustEmbedUnimplementedChatTenantServiceServer()
}

func RegisterChatTenantServiceServer(s grpc.ServiceRegistrar, srv ChatTenantServiceServer) {
	s.RegisterService(&ChatTenantService_ServiceDesc, srv)
}

func _ChatTenantService_PostChatTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatTenantServiceServer).PostChatTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatRole.ChatTenantService/PostChatTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatTenantServiceServer).PostChatTenant(ctx, req.(*PostChatTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatTenantService_ServiceDesc is the grpc.ServiceDesc for ChatTenantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatTenantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatRole.ChatTenantService",
	HandlerType: (*ChatTenantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostChatTenant",
			Handler:    _ChatTenantService_PostChatTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_tenant/chat_tenant.proto",
}
