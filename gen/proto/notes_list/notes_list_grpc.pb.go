// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/notes_list/notes_list.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotesListServiceClient is the client API for NotesListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotesListServiceClient interface {
	// notes list
	InsertNoteInConversation(ctx context.Context, in *PostNoteInConversationRequest, opts ...grpc.CallOption) (*PostNoteInConversationResponse, error)
	UpdateNoteInConversationById(ctx context.Context, in *PutNoteInConversationRequest, opts ...grpc.CallOption) (*PutNoteInConversationResponse, error)
	DeleteNoteInConversationById(ctx context.Context, in *DeleteNoteInConversationRequest, opts ...grpc.CallOption) (*DeleteNoteInConversationResponse, error)
	GetConversationNotesList(ctx context.Context, in *GetConversationNotesListRequest, opts ...grpc.CallOption) (*GetConversationNotesListResponse, error)
}

type notesListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotesListServiceClient(cc grpc.ClientConnInterface) NotesListServiceClient {
	return &notesListServiceClient{cc}
}

func (c *notesListServiceClient) InsertNoteInConversation(ctx context.Context, in *PostNoteInConversationRequest, opts ...grpc.CallOption) (*PostNoteInConversationResponse, error) {
	out := new(PostNoteInConversationResponse)
	err := c.cc.Invoke(ctx, "/proto.notesList.NotesListService/InsertNoteInConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesListServiceClient) UpdateNoteInConversationById(ctx context.Context, in *PutNoteInConversationRequest, opts ...grpc.CallOption) (*PutNoteInConversationResponse, error) {
	out := new(PutNoteInConversationResponse)
	err := c.cc.Invoke(ctx, "/proto.notesList.NotesListService/UpdateNoteInConversationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesListServiceClient) DeleteNoteInConversationById(ctx context.Context, in *DeleteNoteInConversationRequest, opts ...grpc.CallOption) (*DeleteNoteInConversationResponse, error) {
	out := new(DeleteNoteInConversationResponse)
	err := c.cc.Invoke(ctx, "/proto.notesList.NotesListService/DeleteNoteInConversationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesListServiceClient) GetConversationNotesList(ctx context.Context, in *GetConversationNotesListRequest, opts ...grpc.CallOption) (*GetConversationNotesListResponse, error) {
	out := new(GetConversationNotesListResponse)
	err := c.cc.Invoke(ctx, "/proto.notesList.NotesListService/GetConversationNotesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotesListServiceServer is the server API for NotesListService service.
// All implementations should embed UnimplementedNotesListServiceServer
// for forward compatibility
type NotesListServiceServer interface {
	// notes list
	InsertNoteInConversation(context.Context, *PostNoteInConversationRequest) (*PostNoteInConversationResponse, error)
	UpdateNoteInConversationById(context.Context, *PutNoteInConversationRequest) (*PutNoteInConversationResponse, error)
	DeleteNoteInConversationById(context.Context, *DeleteNoteInConversationRequest) (*DeleteNoteInConversationResponse, error)
	GetConversationNotesList(context.Context, *GetConversationNotesListRequest) (*GetConversationNotesListResponse, error)
}

// UnimplementedNotesListServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotesListServiceServer struct {
}

func (UnimplementedNotesListServiceServer) InsertNoteInConversation(context.Context, *PostNoteInConversationRequest) (*PostNoteInConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNoteInConversation not implemented")
}
func (UnimplementedNotesListServiceServer) UpdateNoteInConversationById(context.Context, *PutNoteInConversationRequest) (*PutNoteInConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoteInConversationById not implemented")
}
func (UnimplementedNotesListServiceServer) DeleteNoteInConversationById(context.Context, *DeleteNoteInConversationRequest) (*DeleteNoteInConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNoteInConversationById not implemented")
}
func (UnimplementedNotesListServiceServer) GetConversationNotesList(context.Context, *GetConversationNotesListRequest) (*GetConversationNotesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationNotesList not implemented")
}

// UnsafeNotesListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotesListServiceServer will
// result in compilation errors.
type UnsafeNotesListServiceServer interface {
	mustEmbedUnimplementedNotesListServiceServer()
}

func RegisterNotesListServiceServer(s grpc.ServiceRegistrar, srv NotesListServiceServer) {
	s.RegisterService(&NotesListService_ServiceDesc, srv)
}

func _NotesListService_InsertNoteInConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNoteInConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesListServiceServer).InsertNoteInConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notesList.NotesListService/InsertNoteInConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesListServiceServer).InsertNoteInConversation(ctx, req.(*PostNoteInConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesListService_UpdateNoteInConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNoteInConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesListServiceServer).UpdateNoteInConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notesList.NotesListService/UpdateNoteInConversationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesListServiceServer).UpdateNoteInConversationById(ctx, req.(*PutNoteInConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesListService_DeleteNoteInConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteInConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesListServiceServer).DeleteNoteInConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notesList.NotesListService/DeleteNoteInConversationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesListServiceServer).DeleteNoteInConversationById(ctx, req.(*DeleteNoteInConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotesListService_GetConversationNotesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationNotesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesListServiceServer).GetConversationNotesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notesList.NotesListService/GetConversationNotesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesListServiceServer).GetConversationNotesList(ctx, req.(*GetConversationNotesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotesListService_ServiceDesc is the grpc.ServiceDesc for NotesListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotesListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.notesList.NotesListService",
	HandlerType: (*NotesListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertNoteInConversation",
			Handler:    _NotesListService_InsertNoteInConversation_Handler,
		},
		{
			MethodName: "UpdateNoteInConversationById",
			Handler:    _NotesListService_UpdateNoteInConversationById_Handler,
		},
		{
			MethodName: "DeleteNoteInConversationById",
			Handler:    _NotesListService_DeleteNoteInConversationById_Handler,
		},
		{
			MethodName: "GetConversationNotesList",
			Handler:    _NotesListService_GetConversationNotesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notes_list/notes_list.proto",
}
