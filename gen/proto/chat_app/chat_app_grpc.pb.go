// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/chat_app/chat_app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatAppService_PostChatApp_FullMethodName = "/proto.chatApp.ChatAppService/PostChatApp"
	ChatAppService_GetChatApps_FullMethodName = "/proto.chatApp.ChatAppService/GetChatApps"
)

// ChatAppServiceClient is the client API for ChatAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAppServiceClient interface {
	PostChatApp(ctx context.Context, in *PostChatAppRequest, opts ...grpc.CallOption) (*PostChatAppResponse, error)
	GetChatApps(ctx context.Context, in *GetChatAppRequest, opts ...grpc.CallOption) (*GetChatAppResponse, error)
}

type chatAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAppServiceClient(cc grpc.ClientConnInterface) ChatAppServiceClient {
	return &chatAppServiceClient{cc}
}

func (c *chatAppServiceClient) PostChatApp(ctx context.Context, in *PostChatAppRequest, opts ...grpc.CallOption) (*PostChatAppResponse, error) {
	out := new(PostChatAppResponse)
	err := c.cc.Invoke(ctx, ChatAppService_PostChatApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) GetChatApps(ctx context.Context, in *GetChatAppRequest, opts ...grpc.CallOption) (*GetChatAppResponse, error) {
	out := new(GetChatAppResponse)
	err := c.cc.Invoke(ctx, ChatAppService_GetChatApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatAppServiceServer is the server API for ChatAppService service.
// All implementations should embed UnimplementedChatAppServiceServer
// for forward compatibility
type ChatAppServiceServer interface {
	PostChatApp(context.Context, *PostChatAppRequest) (*PostChatAppResponse, error)
	GetChatApps(context.Context, *GetChatAppRequest) (*GetChatAppResponse, error)
}

// UnimplementedChatAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatAppServiceServer struct {
}

func (UnimplementedChatAppServiceServer) PostChatApp(context.Context, *PostChatAppRequest) (*PostChatAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChatApp not implemented")
}
func (UnimplementedChatAppServiceServer) GetChatApps(context.Context, *GetChatAppRequest) (*GetChatAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatApps not implemented")
}

// UnsafeChatAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAppServiceServer will
// result in compilation errors.
type UnsafeChatAppServiceServer interface {
	mustEmbedUnimplementedChatAppServiceServer()
}

func RegisterChatAppServiceServer(s grpc.ServiceRegistrar, srv ChatAppServiceServer) {
	s.RegisterService(&ChatAppService_ServiceDesc, srv)
}

func _ChatAppService_PostChatApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).PostChatApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatAppService_PostChatApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).PostChatApp(ctx, req.(*PostChatAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_GetChatApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).GetChatApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatAppService_GetChatApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).GetChatApps(ctx, req.(*GetChatAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatAppService_ServiceDesc is the grpc.ServiceDesc for ChatAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatApp.ChatAppService",
	HandlerType: (*ChatAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostChatApp",
			Handler:    _ChatAppService_PostChatApp_Handler,
		},
		{
			MethodName: "GetChatApps",
			Handler:    _ChatAppService_GetChatApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_app/chat_app.proto",
}
