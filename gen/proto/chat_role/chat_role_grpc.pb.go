// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/chat_role/chat_role.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatRoleService_PostChatRole_FullMethodName = "/proto.chatRole.ChatRoleService/PostChatRole"
)

// ChatRoleServiceClient is the client API for ChatRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoleServiceClient interface {
	PostChatRole(ctx context.Context, in *PostChatRoleRequest, opts ...grpc.CallOption) (*PostChatRoleResponse, error)
}

type chatRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoleServiceClient(cc grpc.ClientConnInterface) ChatRoleServiceClient {
	return &chatRoleServiceClient{cc}
}

func (c *chatRoleServiceClient) PostChatRole(ctx context.Context, in *PostChatRoleRequest, opts ...grpc.CallOption) (*PostChatRoleResponse, error) {
	out := new(PostChatRoleResponse)
	err := c.cc.Invoke(ctx, ChatRoleService_PostChatRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoleServiceServer is the server API for ChatRoleService service.
// All implementations should embed UnimplementedChatRoleServiceServer
// for forward compatibility
type ChatRoleServiceServer interface {
	PostChatRole(context.Context, *PostChatRoleRequest) (*PostChatRoleResponse, error)
}

// UnimplementedChatRoleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatRoleServiceServer struct {
}

func (UnimplementedChatRoleServiceServer) PostChatRole(context.Context, *PostChatRoleRequest) (*PostChatRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostChatRole not implemented")
}

// UnsafeChatRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoleServiceServer will
// result in compilation errors.
type UnsafeChatRoleServiceServer interface {
	mustEmbedUnimplementedChatRoleServiceServer()
}

func RegisterChatRoleServiceServer(s grpc.ServiceRegistrar, srv ChatRoleServiceServer) {
	s.RegisterService(&ChatRoleService_ServiceDesc, srv)
}

func _ChatRoleService_PostChatRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostChatRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoleServiceServer).PostChatRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatRoleService_PostChatRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoleServiceServer).PostChatRole(ctx, req.(*PostChatRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRoleService_ServiceDesc is the grpc.ServiceDesc for ChatRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatRole.ChatRoleService",
	HandlerType: (*ChatRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostChatRole",
			Handler:    _ChatRoleService_PostChatRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_role/chat_role.proto",
}
