// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/chat_report/chat_report.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatReportServiceClient is the client API for ChatReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatReportServiceClient interface {
	GetWorkPerformanceReportByUser(ctx context.Context, in *GetWorkPerformanceReportByUserRequest, opts ...grpc.CallOption) (*GetWorkPerformanceReportByUserResponse, error)
	GetMultichannelPerformanceReport(ctx context.Context, in *GetMultichannelPerformanceReportRequest, opts ...grpc.CallOption) (*GetMultichannelPerformanceReportResponse, error)
	ExportWorkPerformanceReportByUser(ctx context.Context, in *ExportWorkPerformanceReportByUserRequest, opts ...grpc.CallOption) (*ExportWorkPerformanceReportByUserResponse, error)
	ExportMultichannelPerformanceReport(ctx context.Context, in *ExportMultichannelPerformanceReportRequest, opts ...grpc.CallOption) (*ExportMultichannelPerformanceReportResponse, error)
}

type chatReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatReportServiceClient(cc grpc.ClientConnInterface) ChatReportServiceClient {
	return &chatReportServiceClient{cc}
}

func (c *chatReportServiceClient) GetWorkPerformanceReportByUser(ctx context.Context, in *GetWorkPerformanceReportByUserRequest, opts ...grpc.CallOption) (*GetWorkPerformanceReportByUserResponse, error) {
	out := new(GetWorkPerformanceReportByUserResponse)
	err := c.cc.Invoke(ctx, "/proto.report.ChatReportService/GetWorkPerformanceReportByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReportServiceClient) GetMultichannelPerformanceReport(ctx context.Context, in *GetMultichannelPerformanceReportRequest, opts ...grpc.CallOption) (*GetMultichannelPerformanceReportResponse, error) {
	out := new(GetMultichannelPerformanceReportResponse)
	err := c.cc.Invoke(ctx, "/proto.report.ChatReportService/GetMultichannelPerformanceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReportServiceClient) ExportWorkPerformanceReportByUser(ctx context.Context, in *ExportWorkPerformanceReportByUserRequest, opts ...grpc.CallOption) (*ExportWorkPerformanceReportByUserResponse, error) {
	out := new(ExportWorkPerformanceReportByUserResponse)
	err := c.cc.Invoke(ctx, "/proto.report.ChatReportService/ExportWorkPerformanceReportByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReportServiceClient) ExportMultichannelPerformanceReport(ctx context.Context, in *ExportMultichannelPerformanceReportRequest, opts ...grpc.CallOption) (*ExportMultichannelPerformanceReportResponse, error) {
	out := new(ExportMultichannelPerformanceReportResponse)
	err := c.cc.Invoke(ctx, "/proto.report.ChatReportService/ExportMultichannelPerformanceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatReportServiceServer is the server API for ChatReportService service.
// All implementations should embed UnimplementedChatReportServiceServer
// for forward compatibility
type ChatReportServiceServer interface {
	GetWorkPerformanceReportByUser(context.Context, *GetWorkPerformanceReportByUserRequest) (*GetWorkPerformanceReportByUserResponse, error)
	GetMultichannelPerformanceReport(context.Context, *GetMultichannelPerformanceReportRequest) (*GetMultichannelPerformanceReportResponse, error)
	ExportWorkPerformanceReportByUser(context.Context, *ExportWorkPerformanceReportByUserRequest) (*ExportWorkPerformanceReportByUserResponse, error)
	ExportMultichannelPerformanceReport(context.Context, *ExportMultichannelPerformanceReportRequest) (*ExportMultichannelPerformanceReportResponse, error)
}

// UnimplementedChatReportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatReportServiceServer struct {
}

func (UnimplementedChatReportServiceServer) GetWorkPerformanceReportByUser(context.Context, *GetWorkPerformanceReportByUserRequest) (*GetWorkPerformanceReportByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkPerformanceReportByUser not implemented")
}
func (UnimplementedChatReportServiceServer) GetMultichannelPerformanceReport(context.Context, *GetMultichannelPerformanceReportRequest) (*GetMultichannelPerformanceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultichannelPerformanceReport not implemented")
}
func (UnimplementedChatReportServiceServer) ExportWorkPerformanceReportByUser(context.Context, *ExportWorkPerformanceReportByUserRequest) (*ExportWorkPerformanceReportByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportWorkPerformanceReportByUser not implemented")
}
func (UnimplementedChatReportServiceServer) ExportMultichannelPerformanceReport(context.Context, *ExportMultichannelPerformanceReportRequest) (*ExportMultichannelPerformanceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMultichannelPerformanceReport not implemented")
}

// UnsafeChatReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatReportServiceServer will
// result in compilation errors.
type UnsafeChatReportServiceServer interface {
	mustEmbedUnimplementedChatReportServiceServer()
}

func RegisterChatReportServiceServer(s grpc.ServiceRegistrar, srv ChatReportServiceServer) {
	s.RegisterService(&ChatReportService_ServiceDesc, srv)
}

func _ChatReportService_GetWorkPerformanceReportByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkPerformanceReportByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReportServiceServer).GetWorkPerformanceReportByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.report.ChatReportService/GetWorkPerformanceReportByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReportServiceServer).GetWorkPerformanceReportByUser(ctx, req.(*GetWorkPerformanceReportByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReportService_GetMultichannelPerformanceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultichannelPerformanceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReportServiceServer).GetMultichannelPerformanceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.report.ChatReportService/GetMultichannelPerformanceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReportServiceServer).GetMultichannelPerformanceReport(ctx, req.(*GetMultichannelPerformanceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReportService_ExportWorkPerformanceReportByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportWorkPerformanceReportByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReportServiceServer).ExportWorkPerformanceReportByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.report.ChatReportService/ExportWorkPerformanceReportByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReportServiceServer).ExportWorkPerformanceReportByUser(ctx, req.(*ExportWorkPerformanceReportByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReportService_ExportMultichannelPerformanceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportMultichannelPerformanceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReportServiceServer).ExportMultichannelPerformanceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.report.ChatReportService/ExportMultichannelPerformanceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReportServiceServer).ExportMultichannelPerformanceReport(ctx, req.(*ExportMultichannelPerformanceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatReportService_ServiceDesc is the grpc.ServiceDesc for ChatReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.report.ChatReportService",
	HandlerType: (*ChatReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkPerformanceReportByUser",
			Handler:    _ChatReportService_GetWorkPerformanceReportByUser_Handler,
		},
		{
			MethodName: "GetMultichannelPerformanceReport",
			Handler:    _ChatReportService_GetMultichannelPerformanceReport_Handler,
		},
		{
			MethodName: "ExportWorkPerformanceReportByUser",
			Handler:    _ChatReportService_ExportWorkPerformanceReportByUser_Handler,
		},
		{
			MethodName: "ExportMultichannelPerformanceReport",
			Handler:    _ChatReportService_ExportMultichannelPerformanceReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat_report/chat_report.proto",
}
