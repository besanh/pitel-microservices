// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: proto/chat_report/chat_report.proto

package pb

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string                  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserFullname string                  `protobuf:"bytes,2,opt,name=user_fullname,json=userFullname,proto3" json:"user_fullname,omitempty"`
	Total        int32                   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Facebook     *ChannelWorkPerformance `protobuf:"bytes,4,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Zalo         *ChannelWorkPerformance `protobuf:"bytes,5,opt,name=zalo,proto3" json:"zalo,omitempty"`
}

func (x *WorkReport) Reset() {
	*x = WorkReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkReport) ProtoMessage() {}

func (x *WorkReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkReport.ProtoReflect.Descriptor instead.
func (*WorkReport) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{0}
}

func (x *WorkReport) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WorkReport) GetUserFullname() string {
	if x != nil {
		return x.UserFullname
	}
	return ""
}

func (x *WorkReport) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WorkReport) GetFacebook() *ChannelWorkPerformance {
	if x != nil {
		return x.Facebook
	}
	return nil
}

func (x *WorkReport) GetZalo() *ChannelWorkPerformance {
	if x != nil {
		return x.Zalo
	}
	return nil
}

type ChannelWorkPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalChannels int32               `protobuf:"varint,1,opt,name=total_channels,json=totalChannels,proto3" json:"total_channels,omitempty"`
	ReceivingTime *PerformanceMetrics `protobuf:"bytes,2,opt,name=receiving_time,json=receivingTime,proto3" json:"receiving_time,omitempty"`
	ReplyingTime  *PerformanceMetrics `protobuf:"bytes,3,opt,name=replying_time,json=replyingTime,proto3" json:"replying_time,omitempty"`
}

func (x *ChannelWorkPerformance) Reset() {
	*x = ChannelWorkPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelWorkPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelWorkPerformance) ProtoMessage() {}

func (x *ChannelWorkPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelWorkPerformance.ProtoReflect.Descriptor instead.
func (*ChannelWorkPerformance) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelWorkPerformance) GetTotalChannels() int32 {
	if x != nil {
		return x.TotalChannels
	}
	return 0
}

func (x *ChannelWorkPerformance) GetReceivingTime() *PerformanceMetrics {
	if x != nil {
		return x.ReceivingTime
	}
	return nil
}

func (x *ChannelWorkPerformance) GetReplyingTime() *PerformanceMetrics {
	if x != nil {
		return x.ReplyingTime
	}
	return nil
}

type PerformanceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fastest int32 `protobuf:"varint,1,opt,name=fastest,proto3" json:"fastest,omitempty"`
	Average int32 `protobuf:"varint,2,opt,name=average,proto3" json:"average,omitempty"`
	Slowest int32 `protobuf:"varint,3,opt,name=slowest,proto3" json:"slowest,omitempty"`
}

func (x *PerformanceMetrics) Reset() {
	*x = PerformanceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetrics) ProtoMessage() {}

func (x *PerformanceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetrics.ProtoReflect.Descriptor instead.
func (*PerformanceMetrics) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{2}
}

func (x *PerformanceMetrics) GetFastest() int32 {
	if x != nil {
		return x.Fastest
	}
	return 0
}

func (x *PerformanceMetrics) GetAverage() int32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *PerformanceMetrics) GetSlowest() int32 {
	if x != nil {
		return x.Slowest
	}
	return 0
}

type GeneralReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel            string         `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	OaName             string         `protobuf:"bytes,2,opt,name=oa_name,json=oaName,proto3" json:"oa_name,omitempty"`
	TotalConversations int32          `protobuf:"varint,3,opt,name=total_conversations,json=totalConversations,proto3" json:"total_conversations,omitempty"`
	Fresh              *QuantityRatio `protobuf:"bytes,4,opt,name=fresh,proto3" json:"fresh,omitempty"`
	Processing         *QuantityRatio `protobuf:"bytes,5,opt,name=processing,proto3" json:"processing,omitempty"`
	Resolved           *QuantityRatio `protobuf:"bytes,6,opt,name=resolved,proto3" json:"resolved,omitempty"`
}

func (x *GeneralReport) Reset() {
	*x = GeneralReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReport) ProtoMessage() {}

func (x *GeneralReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReport.ProtoReflect.Descriptor instead.
func (*GeneralReport) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{3}
}

func (x *GeneralReport) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GeneralReport) GetOaName() string {
	if x != nil {
		return x.OaName
	}
	return ""
}

func (x *GeneralReport) GetTotalConversations() int32 {
	if x != nil {
		return x.TotalConversations
	}
	return 0
}

func (x *GeneralReport) GetFresh() *QuantityRatio {
	if x != nil {
		return x.Fresh
	}
	return nil
}

func (x *GeneralReport) GetProcessing() *QuantityRatio {
	if x != nil {
		return x.Processing
	}
	return nil
}

func (x *GeneralReport) GetResolved() *QuantityRatio {
	if x != nil {
		return x.Resolved
	}
	return nil
}

type QuantityRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity   int32 `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Percentage int32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *QuantityRatio) Reset() {
	*x = QuantityRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityRatio) ProtoMessage() {}

func (x *QuantityRatio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityRatio.ProtoReflect.Descriptor instead.
func (*QuantityRatio) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{4}
}

func (x *QuantityRatio) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *QuantityRatio) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// get chat report work performance
type GetWorkPerformanceReportByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	UnitUuid  string `protobuf:"bytes,5,opt,name=unit_uuid,json=unitUuid,proto3" json:"unit_uuid,omitempty"`
	UserId    string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetWorkPerformanceReportByUserRequest) Reset() {
	*x = GetWorkPerformanceReportByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkPerformanceReportByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkPerformanceReportByUserRequest) ProtoMessage() {}

func (x *GetWorkPerformanceReportByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkPerformanceReportByUserRequest.ProtoReflect.Descriptor instead.
func (*GetWorkPerformanceReportByUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{5}
}

func (x *GetWorkPerformanceReportByUserRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetWorkPerformanceReportByUserRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetWorkPerformanceReportByUserRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetWorkPerformanceReportByUserRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetWorkPerformanceReportByUserRequest) GetUnitUuid() string {
	if x != nil {
		return x.UnitUuid
	}
	return ""
}

func (x *GetWorkPerformanceReportByUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetWorkPerformanceReportByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string        `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*WorkReport `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Total   int32         `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Limit   int32         `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32         `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetWorkPerformanceReportByUserResponse) Reset() {
	*x = GetWorkPerformanceReportByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkPerformanceReportByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkPerformanceReportByUserResponse) ProtoMessage() {}

func (x *GetWorkPerformanceReportByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkPerformanceReportByUserResponse.ProtoReflect.Descriptor instead.
func (*GetWorkPerformanceReportByUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{6}
}

func (x *GetWorkPerformanceReportByUserResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetWorkPerformanceReportByUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWorkPerformanceReportByUserResponse) GetData() []*WorkReport {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetWorkPerformanceReportByUserResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetWorkPerformanceReportByUserResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetWorkPerformanceReportByUserResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// get chat general report
type GetMultichannelPerformanceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Channel   string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	OaId      string `protobuf:"bytes,6,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
}

func (x *GetMultichannelPerformanceReportRequest) Reset() {
	*x = GetMultichannelPerformanceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultichannelPerformanceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultichannelPerformanceReportRequest) ProtoMessage() {}

func (x *GetMultichannelPerformanceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultichannelPerformanceReportRequest.ProtoReflect.Descriptor instead.
func (*GetMultichannelPerformanceReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{7}
}

func (x *GetMultichannelPerformanceReportRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMultichannelPerformanceReportRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMultichannelPerformanceReportRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetMultichannelPerformanceReportRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetMultichannelPerformanceReportRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetMultichannelPerformanceReportRequest) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

type GetMultichannelPerformanceReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string           `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*GeneralReport `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Total   int32            `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Limit   int32            `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32            `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetMultichannelPerformanceReportResponse) Reset() {
	*x = GetMultichannelPerformanceReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMultichannelPerformanceReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultichannelPerformanceReportResponse) ProtoMessage() {}

func (x *GetMultichannelPerformanceReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultichannelPerformanceReportResponse.ProtoReflect.Descriptor instead.
func (*GetMultichannelPerformanceReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{8}
}

func (x *GetMultichannelPerformanceReportResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetMultichannelPerformanceReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMultichannelPerformanceReportResponse) GetData() []*GeneralReport {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMultichannelPerformanceReportResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMultichannelPerformanceReportResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMultichannelPerformanceReportResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// export work performance
type ExportWorkPerformanceReportByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	UnitUuid  string `protobuf:"bytes,3,opt,name=unit_uuid,json=unitUuid,proto3" json:"unit_uuid,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileType  string `protobuf:"bytes,5,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
}

func (x *ExportWorkPerformanceReportByUserRequest) Reset() {
	*x = ExportWorkPerformanceReportByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportWorkPerformanceReportByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportWorkPerformanceReportByUserRequest) ProtoMessage() {}

func (x *ExportWorkPerformanceReportByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportWorkPerformanceReportByUserRequest.ProtoReflect.Descriptor instead.
func (*ExportWorkPerformanceReportByUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{9}
}

func (x *ExportWorkPerformanceReportByUserRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExportWorkPerformanceReportByUserRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ExportWorkPerformanceReportByUserRequest) GetUnitUuid() string {
	if x != nil {
		return x.UnitUuid
	}
	return ""
}

func (x *ExportWorkPerformanceReportByUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExportWorkPerformanceReportByUserRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type ExportWorkPerformanceReportByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *ExportWorkPerformanceReportByUserResponse) Reset() {
	*x = ExportWorkPerformanceReportByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportWorkPerformanceReportByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportWorkPerformanceReportByUserResponse) ProtoMessage() {}

func (x *ExportWorkPerformanceReportByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportWorkPerformanceReportByUserResponse.ProtoReflect.Descriptor instead.
func (*ExportWorkPerformanceReportByUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{10}
}

func (x *ExportWorkPerformanceReportByUserResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExportWorkPerformanceReportByUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExportWorkPerformanceReportByUserResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// export general chat metrics
type ExportMultichannelPerformanceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	OaId      string `protobuf:"bytes,4,opt,name=oa_id,json=oaId,proto3" json:"oa_id,omitempty"`
	FileType  string `protobuf:"bytes,5,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
}

func (x *ExportMultichannelPerformanceReportRequest) Reset() {
	*x = ExportMultichannelPerformanceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMultichannelPerformanceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMultichannelPerformanceReportRequest) ProtoMessage() {}

func (x *ExportMultichannelPerformanceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMultichannelPerformanceReportRequest.ProtoReflect.Descriptor instead.
func (*ExportMultichannelPerformanceReportRequest) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{11}
}

func (x *ExportMultichannelPerformanceReportRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExportMultichannelPerformanceReportRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ExportMultichannelPerformanceReportRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ExportMultichannelPerformanceReportRequest) GetOaId() string {
	if x != nil {
		return x.OaId
	}
	return ""
}

func (x *ExportMultichannelPerformanceReportRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type ExportMultichannelPerformanceReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *ExportMultichannelPerformanceReportResponse) Reset() {
	*x = ExportMultichannelPerformanceReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_chat_report_chat_report_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportMultichannelPerformanceReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMultichannelPerformanceReportResponse) ProtoMessage() {}

func (x *ExportMultichannelPerformanceReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_chat_report_chat_report_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportMultichannelPerformanceReportResponse.ProtoReflect.Descriptor instead.
func (*ExportMultichannelPerformanceReportResponse) Descriptor() ([]byte, []int) {
	return file_proto_chat_report_chat_report_proto_rawDescGZIP(), []int{12}
}

func (x *ExportMultichannelPerformanceReportResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExportMultichannelPerformanceReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExportMultichannelPerformanceReportResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

var File_proto_chat_report_chat_report_proto protoreflect.FileDescriptor

var file_proto_chat_report_chat_report_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01,
	0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x40, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x12, 0x38, 0x0a, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x7a, 0x61, 0x6c, 0x6f, 0x22, 0xcf, 0x01, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x47,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x77,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x77, 0x65,
	0x73, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x05, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xc5,
	0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xc0, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x13, 0x0a, 0x05, 0x6f, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x61, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x76,
	0x0a, 0x29, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x2a, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x61, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x2b, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x8b, 0x06, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x12, 0x18, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0xb6, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0xc0, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0xc9, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22,
	0x22, 0x2f, 0x62, 0x73, 0x73, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x6c, 0x34, 0x76, 0x6e, 0x2f, 0x66, 0x69, 0x6e, 0x73, 0x2d, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_chat_report_chat_report_proto_rawDescOnce sync.Once
	file_proto_chat_report_chat_report_proto_rawDescData = file_proto_chat_report_chat_report_proto_rawDesc
)

func file_proto_chat_report_chat_report_proto_rawDescGZIP() []byte {
	file_proto_chat_report_chat_report_proto_rawDescOnce.Do(func() {
		file_proto_chat_report_chat_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_chat_report_chat_report_proto_rawDescData)
	})
	return file_proto_chat_report_chat_report_proto_rawDescData
}

var file_proto_chat_report_chat_report_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_chat_report_chat_report_proto_goTypes = []interface{}{
	(*WorkReport)(nil),                                  // 0: proto.report.WorkReport
	(*ChannelWorkPerformance)(nil),                      // 1: proto.report.ChannelWorkPerformance
	(*PerformanceMetrics)(nil),                          // 2: proto.report.PerformanceMetrics
	(*GeneralReport)(nil),                               // 3: proto.report.GeneralReport
	(*QuantityRatio)(nil),                               // 4: proto.report.QuantityRatio
	(*GetWorkPerformanceReportByUserRequest)(nil),       // 5: proto.report.GetWorkPerformanceReportByUserRequest
	(*GetWorkPerformanceReportByUserResponse)(nil),      // 6: proto.report.GetWorkPerformanceReportByUserResponse
	(*GetMultichannelPerformanceReportRequest)(nil),     // 7: proto.report.GetMultichannelPerformanceReportRequest
	(*GetMultichannelPerformanceReportResponse)(nil),    // 8: proto.report.GetMultichannelPerformanceReportResponse
	(*ExportWorkPerformanceReportByUserRequest)(nil),    // 9: proto.report.ExportWorkPerformanceReportByUserRequest
	(*ExportWorkPerformanceReportByUserResponse)(nil),   // 10: proto.report.ExportWorkPerformanceReportByUserResponse
	(*ExportMultichannelPerformanceReportRequest)(nil),  // 11: proto.report.ExportMultichannelPerformanceReportRequest
	(*ExportMultichannelPerformanceReportResponse)(nil), // 12: proto.report.ExportMultichannelPerformanceReportResponse
}
var file_proto_chat_report_chat_report_proto_depIdxs = []int32{
	1,  // 0: proto.report.WorkReport.facebook:type_name -> proto.report.ChannelWorkPerformance
	1,  // 1: proto.report.WorkReport.zalo:type_name -> proto.report.ChannelWorkPerformance
	2,  // 2: proto.report.ChannelWorkPerformance.receiving_time:type_name -> proto.report.PerformanceMetrics
	2,  // 3: proto.report.ChannelWorkPerformance.replying_time:type_name -> proto.report.PerformanceMetrics
	4,  // 4: proto.report.GeneralReport.fresh:type_name -> proto.report.QuantityRatio
	4,  // 5: proto.report.GeneralReport.processing:type_name -> proto.report.QuantityRatio
	4,  // 6: proto.report.GeneralReport.resolved:type_name -> proto.report.QuantityRatio
	0,  // 7: proto.report.GetWorkPerformanceReportByUserResponse.data:type_name -> proto.report.WorkReport
	3,  // 8: proto.report.GetMultichannelPerformanceReportResponse.data:type_name -> proto.report.GeneralReport
	5,  // 9: proto.report.ChatReportService.GetWorkPerformanceReportByUser:input_type -> proto.report.GetWorkPerformanceReportByUserRequest
	7,  // 10: proto.report.ChatReportService.GetMultichannelPerformanceReport:input_type -> proto.report.GetMultichannelPerformanceReportRequest
	9,  // 11: proto.report.ChatReportService.ExportWorkPerformanceReportByUser:input_type -> proto.report.ExportWorkPerformanceReportByUserRequest
	11, // 12: proto.report.ChatReportService.ExportMultichannelPerformanceReport:input_type -> proto.report.ExportMultichannelPerformanceReportRequest
	6,  // 13: proto.report.ChatReportService.GetWorkPerformanceReportByUser:output_type -> proto.report.GetWorkPerformanceReportByUserResponse
	8,  // 14: proto.report.ChatReportService.GetMultichannelPerformanceReport:output_type -> proto.report.GetMultichannelPerformanceReportResponse
	10, // 15: proto.report.ChatReportService.ExportWorkPerformanceReportByUser:output_type -> proto.report.ExportWorkPerformanceReportByUserResponse
	12, // 16: proto.report.ChatReportService.ExportMultichannelPerformanceReport:output_type -> proto.report.ExportMultichannelPerformanceReportResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_chat_report_chat_report_proto_init() }
func file_proto_chat_report_chat_report_proto_init() {
	if File_proto_chat_report_chat_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_chat_report_chat_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelWorkPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkPerformanceReportByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkPerformanceReportByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMultichannelPerformanceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMultichannelPerformanceReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportWorkPerformanceReportByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportWorkPerformanceReportByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMultichannelPerformanceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_chat_report_chat_report_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportMultichannelPerformanceReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_chat_report_chat_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_chat_report_chat_report_proto_goTypes,
		DependencyIndexes: file_proto_chat_report_chat_report_proto_depIdxs,
		MessageInfos:      file_proto_chat_report_chat_report_proto_msgTypes,
	}.Build()
	File_proto_chat_report_chat_report_proto = out.File
	file_proto_chat_report_chat_report_proto_rawDesc = nil
	file_proto_chat_report_chat_report_proto_goTypes = nil
	file_proto_chat_report_chat_report_proto_depIdxs = nil
}
