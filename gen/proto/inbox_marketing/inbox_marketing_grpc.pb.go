// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/inbox_marketing/inbox_marketing.proto

package inbox_marketing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InboxMarketingService_SendInboxMarketing_FullMethodName = "/proto.inbox_marketing.inbox_marketing.InboxMarketingService/SendInboxMarketing"
)

// InboxMarketingServiceClient is the client API for InboxMarketingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InboxMarketingServiceClient interface {
	SendInboxMarketing(ctx context.Context, in *InboxMarketingRequestRequest, opts ...grpc.CallOption) (*InboxMarketingResponse, error)
}

type inboxMarketingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInboxMarketingServiceClient(cc grpc.ClientConnInterface) InboxMarketingServiceClient {
	return &inboxMarketingServiceClient{cc}
}

func (c *inboxMarketingServiceClient) SendInboxMarketing(ctx context.Context, in *InboxMarketingRequestRequest, opts ...grpc.CallOption) (*InboxMarketingResponse, error) {
	out := new(InboxMarketingResponse)
	err := c.cc.Invoke(ctx, InboxMarketingService_SendInboxMarketing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InboxMarketingServiceServer is the server API for InboxMarketingService service.
// All implementations should embed UnimplementedInboxMarketingServiceServer
// for forward compatibility
type InboxMarketingServiceServer interface {
	SendInboxMarketing(context.Context, *InboxMarketingRequestRequest) (*InboxMarketingResponse, error)
}

// UnimplementedInboxMarketingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInboxMarketingServiceServer struct {
}

func (UnimplementedInboxMarketingServiceServer) SendInboxMarketing(context.Context, *InboxMarketingRequestRequest) (*InboxMarketingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInboxMarketing not implemented")
}

// UnsafeInboxMarketingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InboxMarketingServiceServer will
// result in compilation errors.
type UnsafeInboxMarketingServiceServer interface {
	mustEmbedUnimplementedInboxMarketingServiceServer()
}

func RegisterInboxMarketingServiceServer(s grpc.ServiceRegistrar, srv InboxMarketingServiceServer) {
	s.RegisterService(&InboxMarketingService_ServiceDesc, srv)
}

func _InboxMarketingService_SendInboxMarketing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboxMarketingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboxMarketingServiceServer).SendInboxMarketing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InboxMarketingService_SendInboxMarketing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboxMarketingServiceServer).SendInboxMarketing(ctx, req.(*InboxMarketingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InboxMarketingService_ServiceDesc is the grpc.ServiceDesc for InboxMarketingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InboxMarketingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.inbox_marketing.inbox_marketing.InboxMarketingService",
	HandlerType: (*InboxMarketingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInboxMarketing",
			Handler:    _InboxMarketingService_SendInboxMarketing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inbox_marketing/inbox_marketing.proto",
}
